{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default_cover.jpg","path":"img/default_cover.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default_cover01.jpg","path":"img/default_cover01.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default_cover02.jpg","path":"img/default_cover02.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default_cover03.jpg","path":"img/default_cover03.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default_cover04.jpg","path":"img/default_cover04.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default_cover05.jpg","path":"img/default_cover05.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon1.png","path":"img/favicon1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/top.jpg","path":"img/top.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/top1.jpg","path":"img/top1.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/C-使用zlib库来压缩文件.md","hash":"a74b78a777fd23694ad4f75172201e7ac046135e","modified":1707454601509},{"_id":"source/_posts/Go语言学习笔记.md","hash":"3901e00d859365ec1931dcd0a4b9e13a86846d55","modified":1707454629543},{"_id":"source/_posts/git.md","hash":"38ad1d636eb09eb1ed95305afba8f7c3729ae0f2","modified":1707456037141},{"_id":"source/_posts/平方根倒数算法.md","hash":"9cb0eb8fcb3f25e5611b83b3774f4edf7ada34b7","modified":1707456017041},{"_id":"source/tags/index.md","hash":"6c83a6b247239921e3f22eac0724ba65f06c6914","modified":1706284523484},{"_id":"source/categories/index.md","hash":"46a0c60c946f54ac3e4ad6654a45b4cbdd48cb6c","modified":1706284968103},{"_id":"source/_posts/进程间的通信方式.md","hash":"7105c4ecce2a21a1963a2f4470828b5bfbc12ba7","modified":1707455090531},{"_id":"source/_posts/平方根倒数算法/运算过程.png","hash":"452225103f084e7ffb3be1aa9d5609cc1e505016","modified":1706532896107},{"_id":"source/_posts/git/image-20231204112945547.png","hash":"eff5ebfc4a4c5539cfd8dfd9c4b5dfed83f0fe11","modified":1704375415909},{"_id":"source/_posts/git/image-20231204113304822.png","hash":"8c059b88dc8eac379a01ff2b842f59bc9c7dfcc7","modified":1704375415909},{"_id":"source/_posts/git/image-20231204113208566.png","hash":"be5c376a4091dc37070325f85951ccb5cd214e74","modified":1704375415909},{"_id":"source/_posts/平方根倒数算法/WTF.png","hash":"58a5cfc1e84918f49258973ec18f362bee15a510","modified":1706532896107},{"_id":"source/_posts/git/image-20231204111350240.png","hash":"b10c40f287f5e8933502801fe32cb3562b3f5236","modified":1704375415909},{"_id":"source/_posts/git/image-20231204110955462.png","hash":"a0eb304ceda27842d706b29f5dd93e231ce5b5cb","modified":1704375415903},{"_id":"source/_posts/git/image-20231204113100512.png","hash":"dea8dd3f1ac6c962555a2122bedaed5565c2f11b","modified":1704375415909},{"_id":"source/_posts/git/image-20231204111125551.png","hash":"225fa0eec9bca8d94a18d88c25a06a7a80c95de9","modified":1704375415909},{"_id":"source/_posts/进程间的通信方式/image-20240130223824673.png","hash":"936c1b00abc4de2fb48bb478b04683e98d9f2fd3","modified":1706625504696},{"_id":"source/_posts/进程间的通信方式/image-20240130223920751.png","hash":"936c1b00abc4de2fb48bb478b04683e98d9f2fd3","modified":1706625560765},{"_id":"source/_posts/进程间的通信方式/image-20240130232827259.png","hash":"fbf784ce1ad312d9fd7a41e90b73d800ae2e0fba","modified":1706628507289},{"_id":"source/_posts/进程间的通信方式/image-20240130224638178.png","hash":"3fc74a884e2c346ccf3ff5bdfb1c8d0923d91404","modified":1706625998219},{"_id":"source/_posts/进程间的通信方式/image-20240130234754230.png","hash":"fd658ca22bb8d21052c0f10e8225855134402c10","modified":1706629674288},{"_id":"source/_posts/进程间的通信方式/image-20240130234627976.png","hash":"aa7514d29a51d8d39068e1f27127c68c88501b9b","modified":1706629588086},{"_id":"source/_posts/进程间的通信方式/image-20240130234556499.png","hash":"20d40b4a577854ace6eb9c63582074db879a5238","modified":1706629556556},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1706281814689},{"_id":"themes/butterfly/README_CN.md","hash":"9d729ee2ffc5e5f703ccfbfbbb7b286d59071125","modified":1706281814689},{"_id":"themes/butterfly/README.md","hash":"20a91bea7f7ada8b8195d2abff106a7ce21bba20","modified":1706281814689},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1706281814689},{"_id":"themes/butterfly/plugins.yml","hash":"5dea6a045a9b33b35809c7f180f256431a6fba09","modified":1706281814704},{"_id":"themes/butterfly/_config.yml","hash":"8b64d20582e03189426f0c4d6a66e9de4be38247","modified":1707462068232},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1706281814689},{"_id":"themes/butterfly/package.json","hash":"58300c8f776c115ac8e069a39e9460faafc60122","modified":1706281814704},{"_id":"themes/butterfly/languages/default.yml","hash":"90e9e2f36dc51aa77eb7804ae048b4876035b12d","modified":1706281814689},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1706281814704},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"2dcc70a011b37890215ae0fd6d8f8c78aa8af6b0","modified":1706281814689},{"_id":"themes/butterfly/languages/en.yml","hash":"68127be0e6b44cfc5f31353d8b275c02939b3ff9","modified":1706281814689},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1706281814704},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"1392e7b8c678cdfb54f55523693e66abc7d80538","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ea8d4e8ac6af93cd268ba8f6ffcb80417bc2501e","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1706281814689},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"f448bf73103b88de4443e52d600e871cf3de3e32","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1706281814689},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1706281814704},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1706281814723},{"_id":"themes/butterfly/source/img/favicon1.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1706281814723},{"_id":"themes/butterfly/source/css/var.styl","hash":"950250f66faeb611a67540e0fa6cedbcf5a7a321","modified":1706281814723},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1706281814723},{"_id":"themes/butterfly/source/js/main.js","hash":"59cd756a94ecdf3ec7b18f50691a8a6305f7a65a","modified":1706281814723},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1706281814723},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1706281814704},{"_id":"themes/butterfly/source/js/utils.js","hash":"7b871fe0c4456660cff4c7b9cc4ed089adac2caf","modified":1706281814736},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"d776c670e4076ad6049dbb64cdee7a734b51d37f","modified":1706281814736},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1706281814704},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1706281814704},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1706281814704},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5ed2d7ef240c927fe1b7a7fb5bf9e55e2bfd55a5","modified":1706281814720},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"0a336dfe5ed08952fa0df1532421df38a74a20d6","modified":1706281814719},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"b1dfc3c898b886eab1241b068fc27d7a26a3b7d2","modified":1706281814704},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1706281814719},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0df22d7dbfa766a65cb6032a1f003348f4307cfe","modified":1706281814720},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1706281814720},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"cdd992c8577d583c237b6aac9f5077d8200879b2","modified":1706281814720},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"b12895e0765d596494e5526d121de0dd5a7c23d3","modified":1706281814721},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b55f71347d2ead097c7f98c0ec792b091433345c","modified":1706281814721},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"164d5f1c2d1b4cb5a813a6fc574016743a53c019","modified":1706281814723},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c74d6a9b8f71e69447f7847a5f5e81555d68b140","modified":1706281814721},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1706281814723},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ec77b3093f5de67e7032f40a5b12f1389f6f6ff","modified":1706281814723},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"17c0095bc8d612a268cdcab000b1742dc4c6f811","modified":1706281814721},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"5d08c3552f7d3c80a724ca628bff66321abe2e5a","modified":1706281814723},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"289f85847c58f0b2b7d98a68e370a2896edb8949","modified":1706281814723},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1706281814721},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"c863d2732ce4bdc084f2d0db92f50f80328c1007","modified":1706281814723},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"b013dc0a3d57d2caa18b89263f23871da9ec456d","modified":1706281814723},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"35d54adc92e717cc32e13515122b025fd1a98ea2","modified":1706281814723},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"dc56e5182dd3813dc977c9bf8556dcc7615e467b","modified":1706281814723},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1706281814723},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"e611074a5a7f489a8b04afac0a3f7f882ce26532","modified":1706281814723},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1706281814689},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"7c448886f230adb4f4a0208c88fff809abcb5637","modified":1706281814723},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"39e1ca0a54eb5fd3688a78737417a1aaa50914c9","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a7c929b90ae52b78b39b1728e3ab0e3db1cb7b9a","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"e7b25a322ae861dca06d458d3f914220e92758cf","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"0abad416b1974a17e5be7817931d5fe799180170","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"912df10a053db3135968e92b6fd1a707ee94c968","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"9b734d99963f3e7f562597dcf60485ccbf6e961c","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"194a5f310dccecee3ae0b648e4e5318f6fbbddcd","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"d48d77af1670bd568d784794408bf524a448bfcc","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1706281814704},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e920dae9ce00177922468db49240f5aca0af4f64","modified":1706281814723},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1706281814704},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"0421da07907b3d98df64239e073b23fbb3f04149","modified":1706281814723},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8df529f71e25f1c0a00e533de7944ed3d1ba7bd8","modified":1706281814704},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"aae70ddd126b2e40158e45036abecbfa33cbfbba","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"66a7a0e3c58ac23c81afe9fe18834b9db9c42698","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"7ae27854a737a02eca89b0b92db94cb298fef59e","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1706281814723},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"41054740cfbd1357138785464f6859681ca58493","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c0b11a1a5f52e3a6af4e312a8134c93eda18a7dd","modified":1706281814723},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"0322237e762db401d7b4aa33168d0b9334a9ec26","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"80ee9d0bfe5d38aac1f0cdcea5fc88b71d310041","modified":1706281814723},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1706281814723},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"dbc855795a881f8c805bf5c9c5c4d5d542a648ec","modified":1706281814723},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1706281814723},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"a22fd15048d21452f0015d0765d295d730203308","modified":1706281814723},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1706281814723},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1706281814723},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1706281814723},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1706281814723},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"a977cd8161ef4d6ddd5293e81403519076657430","modified":1706281814723},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1706281814723},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ab3904451ae1d78903424b8b2ef815c8571e1749","modified":1706281814736},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1706281814723},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3e9355b76f87e2ee90f652855282b37ab5ae0b3e","modified":1706281814723},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1706281814723},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a7c2fe73cc05ad3525909b86ad0ede1a9f2d3b48","modified":1706281814723},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1706281814723},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1706281814723},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"8a53d7ba5ca2f5eb4124b684e7845b648583f658","modified":1706281814723},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1706281814723},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1706281814723},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1706281814723},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1706281814723},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"353b95f9a6c2c1e777d978118cb61f909ccbf89c","modified":1706281814723},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1706281814723},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1706281814723},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"8f95aca305b56ccd7c8c7367b03d26db816ebd5f","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"19b5cfa1f77781246e02967cefe149f19170e45f","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1706281814702},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1706281814702},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1706281814702},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1706281814702},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1706281814703},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"2dc9f36085ed33d040549fa3954e8fdecf1e5c6d","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1706281814689},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"364d1fd655baca9132038ef1e312abde2c0bc7de","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"f78c9c20c86d58c7cf099f6f8d6097103d7d43e5","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"11f5dca1432e59f22955aaf4ac3e9de6b286d887","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"1eab7ca1cb16c6786f9c3ca0efef8cc15e444ab4","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c86c8fc1a28514a02a1f6a25ca9ec05eb3955b7","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"09c2ef4bc6d005f96dfa48b1d9af1ec095c5266d","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"7f450664e6323a076ae59c393b0f22167cfa82e5","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"0b44f6de0f5632b55298d506833f45dae46a6346","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b65a42167df5fb07e2a63f312a58c321d3112a90","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"a7d794987bde815607206254df6549a5a53e2cb0","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"4ed7c74087e81c6fcaf4fca7dced58b4e19f4cb1","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"6de0c412a4d9b65c576ec79e1949925823c90fa6","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"d8898e427acd91ceb97d6a7ee3acb011ca86b9fc","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"c682e4d61017fb0dd2e837bfcc242371f1a13364","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"fc8814bd016d039874ec2fc24dcb78587892e2a6","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"a4e52188b6effeee1df2a01dcbf4105de76a61a8","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"17520a86de12ae585289463c066d3ac91b78a2ff","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"52a06a2e039f44383085333cac69f3f4e7d0ad3a","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"0544d91c0bc9e26e0fe1b5ff490f4a8540ed1ee1","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ecfff55b2c7f6d87ce4d5028fdf9f8c0bf155c73","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"420a86e73d0d748ac234fd00d06d9e433ca5e3f2","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1706281814704},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c16ee69b5ca8db016db0508d014ae0867c4ce929","modified":1706281814704},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1706281814723},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1706281814723},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1706281814723},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1706281814723},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"7c9cc43e1d2577f7151039d58e603c30860fd281","modified":1706281814723},{"_id":"themes/butterfly/source/img/default_cover02.jpg","hash":"50a203fee7a6bf84dbfb0137f7722f77c84f5185","modified":1707455821800},{"_id":"themes/butterfly/source/img/favicon.png","hash":"ec2d958aec90f0f78f63204dc666249245d82874","modified":1707451907202},{"_id":"themes/butterfly/source/img/default_cover04.jpg","hash":"334596f7acdbef99d4c559373cd99d38c48443e1","modified":1707455850232},{"_id":"themes/butterfly/source/img/default_cover03.jpg","hash":"3a1d6989ee9d5bd02b9bd8a6f7a5c712933b5612","modified":1707455830619},{"_id":"themes/butterfly/source/img/default_cover01.jpg","hash":"4dade0ce40b7859166847e1738648ce6baae16fb","modified":1707454691398},{"_id":"themes/butterfly/source/img/top.jpg","hash":"7d273fdd1fe40b1963b785a2129ec50c0f5b9274","modified":1707451263607},{"_id":"themes/butterfly/source/img/top1.jpg","hash":"c0191d684560b2afeb1b35332afd9b2f4ded8a62","modified":1707451576179},{"_id":"themes/butterfly/source/img/default_cover05.jpg","hash":"869b63bab373166df318d3096ee731c4a8c2ebcc","modified":1707455865401},{"_id":"themes/butterfly/source/img/default_cover.jpg","hash":"b4569d598530850e667d2b80fd20c7b4e0ddfdcd","modified":1707454134778},{"_id":"public/search.xml","hash":"97893ec3c7b74957baa71d6dbb650223e7628116","modified":1707462118120},{"_id":"public/tags/index.html","hash":"c41cb8a548f9709c8ae04e76be195f81492d844a","modified":1707462118120},{"_id":"public/categories/index.html","hash":"5c1a79ffa896c0ee2265b2e5585328f1c6d4adad","modified":1707462118120},{"_id":"public/2024/01/30/index/index.html","hash":"cadb17ade0f4585bae4b328ee0bcd6532d1a7f2c","modified":1707462118120},{"_id":"public/2024/01/26/index/index.html","hash":"edaad75e27306b9012b738c4cb92b33965a0cbac","modified":1707462118120},{"_id":"public/2024/01/24/index/index.html","hash":"367569ed32f537cb74e4c88c1e9e2fa8185c2e37","modified":1707462118120},{"_id":"public/2023/12/14/index/index.html","hash":"b51157e2466d9c8a3aa47b2efee0032b1b400e82","modified":1707462118120},{"_id":"public/2024/01/04/index/index.html","hash":"d4cf6a60b51c0e8ccede758c1b1adeb1ffdd8173","modified":1707462118120},{"_id":"public/archives/index.html","hash":"147d2f26ef47bbce426de193fdb1eef36640bf0f","modified":1707462118120},{"_id":"public/archives/2023/index.html","hash":"1c779e3e32f35800bf1b0b328f8059588ef7df94","modified":1707462118120},{"_id":"public/archives/2023/12/index.html","hash":"ba31a79d96a0a8c356eb5c49969c4dcc6a59b3ef","modified":1707462118120},{"_id":"public/archives/2024/index.html","hash":"ca81f89853de9cce90b76822ad98aec85c1d9f97","modified":1707462118120},{"_id":"public/archives/2024/01/index.html","hash":"bf33a3da79f4b0a8e3bc31a6d9fe4faa0e9136aa","modified":1707462118120},{"_id":"public/index.html","hash":"70c90cf64914c2f147d08a7dccefb15887f3a2df","modified":1707462118120},{"_id":"public/categories/学习笔记/index.html","hash":"5bf926cb3e01e7e357f7610c16bb0cc120f8e2db","modified":1707462118120},{"_id":"public/categories/技术研究/index.html","hash":"ccf39469e570ef4ab346dce8b66cce24c09e0168","modified":1707462118120},{"_id":"public/tags/go语言-并发/index.html","hash":"6120b3e95cae8460ad27e099d49df3e6c50954df","modified":1707462118120},{"_id":"public/tags/C/index.html","hash":"f082f76cd54391e0b46f31568dab33c745b02b50","modified":1707462118120},{"_id":"public/tags/zlib/index.html","hash":"efe71d35258375ae783753a6fbe4af4d621334bb","modified":1707462118120},{"_id":"public/tags/git/index.html","hash":"ae3d8e0665201690d270cc9c760ea25184616d32","modified":1707462118120},{"_id":"public/tags/数学/index.html","hash":"6453e6a57eb439f2c98717be62d34d8b925e5ba9","modified":1707462118120},{"_id":"public/tags/算法/index.html","hash":"9631eadc9694f3fbf2b72adc065054b8c54b5017","modified":1707462118120},{"_id":"public/tags/进程通信/index.html","hash":"0c73d7dcc70ca9f441658e6beecbdd18b81e0b32","modified":1707462118120},{"_id":"public/tags/操作系统/index.html","hash":"77abbd4e920b26681ebceb3fd0c0125907b3735d","modified":1707462118120},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1707462118120},{"_id":"public/img/favicon1.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1707462118120},{"_id":"public/2024/01/04/index/image-20231204113208566.png","hash":"be5c376a4091dc37070325f85951ccb5cd214e74","modified":1707462118120},{"_id":"public/2024/01/04/index/image-20231204112945547.png","hash":"eff5ebfc4a4c5539cfd8dfd9c4b5dfed83f0fe11","modified":1707462118120},{"_id":"public/2024/01/04/index/image-20231204113304822.png","hash":"8c059b88dc8eac379a01ff2b842f59bc9c7dfcc7","modified":1707462118120},{"_id":"public/2024/01/24/index/运算过程.png","hash":"452225103f084e7ffb3be1aa9d5609cc1e505016","modified":1707462118120},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1707462118120},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1707462118120},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1707462118120},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1707462118120},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1707462118120},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1707462118120},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1707462118120},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1707462118120},{"_id":"public/css/index.css","hash":"01a3966d3237328f061b04cdc9597fc3a02c4552","modified":1707462118120},{"_id":"public/2024/01/04/index/image-20231204111125551.png","hash":"225fa0eec9bca8d94a18d88c25a06a7a80c95de9","modified":1707462118120},{"_id":"public/2024/01/04/index/image-20231204111350240.png","hash":"b10c40f287f5e8933502801fe32cb3562b3f5236","modified":1707462118120},{"_id":"public/2024/01/04/index/image-20231204110955462.png","hash":"a0eb304ceda27842d706b29f5dd93e231ce5b5cb","modified":1707462118120},{"_id":"public/2024/01/04/index/image-20231204113100512.png","hash":"dea8dd3f1ac6c962555a2122bedaed5565c2f11b","modified":1707462118120},{"_id":"public/2024/01/24/index/WTF.png","hash":"58a5cfc1e84918f49258973ec18f362bee15a510","modified":1707462118120},{"_id":"public/2024/01/30/index/image-20240130223824673.png","hash":"936c1b00abc4de2fb48bb478b04683e98d9f2fd3","modified":1707462118120},{"_id":"public/2024/01/30/index/image-20240130223920751.png","hash":"936c1b00abc4de2fb48bb478b04683e98d9f2fd3","modified":1707462118120},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1707462118120},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1707462118120},{"_id":"public/2024/01/30/index/image-20240130224638178.png","hash":"3fc74a884e2c346ccf3ff5bdfb1c8d0923d91404","modified":1707462118120},{"_id":"public/2024/01/30/index/image-20240130232827259.png","hash":"fbf784ce1ad312d9fd7a41e90b73d800ae2e0fba","modified":1707462118120},{"_id":"public/2024/01/30/index/image-20240130234754230.png","hash":"fd658ca22bb8d21052c0f10e8225855134402c10","modified":1707462118120},{"_id":"public/img/default_cover02.jpg","hash":"50a203fee7a6bf84dbfb0137f7722f77c84f5185","modified":1707462118120},{"_id":"public/img/favicon.png","hash":"ec2d958aec90f0f78f63204dc666249245d82874","modified":1707462118120},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1707462118120},{"_id":"public/2024/01/30/index/image-20240130234556499.png","hash":"20d40b4a577854ace6eb9c63582074db879a5238","modified":1707462118120},{"_id":"public/2024/01/30/index/image-20240130234627976.png","hash":"aa7514d29a51d8d39068e1f27127c68c88501b9b","modified":1707462118120},{"_id":"public/img/default_cover04.jpg","hash":"334596f7acdbef99d4c559373cd99d38c48443e1","modified":1707462118120},{"_id":"public/img/default_cover01.jpg","hash":"4dade0ce40b7859166847e1738648ce6baae16fb","modified":1707462118120},{"_id":"public/img/default_cover03.jpg","hash":"3a1d6989ee9d5bd02b9bd8a6f7a5c712933b5612","modified":1707462118120},{"_id":"public/img/top.jpg","hash":"7d273fdd1fe40b1963b785a2129ec50c0f5b9274","modified":1707462118120},{"_id":"public/img/top1.jpg","hash":"c0191d684560b2afeb1b35332afd9b2f4ded8a62","modified":1707462118120},{"_id":"public/img/default_cover05.jpg","hash":"869b63bab373166df318d3096ee731c4a8c2ebcc","modified":1707462118120},{"_id":"public/img/default_cover.jpg","hash":"b4569d598530850e667d2b80fd20c7b4e0ddfdcd","modified":1707462118120}],"Category":[{"name":"学习笔记","_id":"clseauyn30004ngdf7f98fq7c"},{"name":"技术研究","_id":"clseauyn60009ngdf0on69k78"}],"Data":[],"Page":[{"title":"分类","date":"2024-01-26T15:56:15.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-01-26 23:56:15\ntype: \"categories\"\n---\n","updated":"2024-01-26T16:02:48.103Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clseauymy0000ngdfetxnftmo","content":"","cover":"/img/default_cover.jpg","cover_type":"img","excerpt":"","more":""},{"title":"标签","date":"2024-01-26T15:53:19.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2024-01-26 23:53:19\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2024-01-26T15:55:23.484Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clseauyn20002ngdffzsj0x8m","content":"","cover":"/img/default_cover01.jpg","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"Go语言基本语法","date":"2023-12-14T09:16:50.000Z","cover":"/img/default_cover01.jpg","top_img":null,"_content":"\n## 基本语法\n\n### GO语言特性\n\n* 并发编程\n\n  Go语言中引入了`goroutine`，通过调用`go`关键字，可以让函数以goroutine的方式进行运行，以协程为单位进行运行。\n\n  协程相比线程更加轻量级，也更节省系统资源。\n\n  goroutine内部采用管道`channel`进行消息传递，从而实现共享内存。\n\n* 错误处理\n\n  函数通过返回错误类型`error`或者`bool`类型表明函数执行结果，通过判断返回值是否为`nil`。\n\n  引入了defer关键字用于标准的错误处理流程，提供内置函数`panic`，`recover`完成异常抛出和捕捉\n\n* 垃圾回收\n\n  自带自动回收功能，不需要`delete`和`free`来释放内存\n\n* 多返回值\n\n  支持多返回值，可以用下划线作为占用符丢掉不要的返回值\n\n* 匿名函数\n\n  支持常规的匿名函数和闭包\n\n```go\n// hello.go\n\npackage main\n\nimport (\n    \"fmt\" //导入fmt包，调用其中的Println()函数\n)\n\nfunc main() {\n    fmt.Println(\"Hello，world！\")\n}\n```\n\n### 数据类型\n\n* 常量\n\n  使用`const`声明，可以限定常量类型，也可以不指定类型（称为字面常量）\n\n```\nconst limit = 512\nconst top uint16 = 1421\nconst Pi float64 = 3.1415926\n// 多重赋值\nconst x,y int = 1,2\n\n// 多个常量赋值\nconst (\n\tone = 1\n\ttwo = 2\n)\n```\n\n* iota\n\n  `iota`是一个可以被编译器修改的常量，在`const`关键字出现时被重置为`0`，在下一个`const`出现之前，每出现一次`iota`，所代表的数字自动加1\n\n```\nconst (\n    a = iota  //a == 0\n    b = iota  //b ==1\n    c = iota  //c == 2\n)\n\nconst d = iota //d==0,因为const的出现，iota被重置为0\n```\n\n* 变量\n\n  变量使用`var`进行声明，可以使用`:=`对变量之间进行初始化，Go编译器会自动推导出该变量的类型\n\n* 整型\n\n  可以通过`unsafe.Sizeof`函数来查看字节长度\n\n| 类型      | 说明                                                         |\n| :-------- | :----------------------------------------------------------- |\n| `byte`    | 等同于 uint8，uint8的别名                                    |\n| `int`     | 依赖于不同平台下的实现，可以是 int32 或者 int64              |\n| `int8`    | [-128, 127]                                                  |\n| `int16`   | [-32768, 32767]                                              |\n| `int32`   | [-2147483648, 2147483647]                                    |\n| `int64`   | [-9223372036854775808, 9223372036854775807]                  |\n| `rune`    | 等同于 int32，代表Unicode字符类型                            |\n| `uint`    | 依赖于不同平台下的实现，可以是 uint32 或者 uint64            |\n| `uint8`   | [0, 255]                                                     |\n| `uint16`  | [0, 65535]                                                   |\n| `uint32`  | [0, 4294967295]                                              |\n| `uint64`  | [0, 18446744073709551615]                                    |\n| `uintptr` | 一个可以恰好容纳指针值的无符号整型（对 32 位平台是 uint32, 对 64 位平台是 uint64） |\n\n* 浮点类型\n\n| 类型      | 说明                                                         |\n| --------- | ------------------------------------------------------------ |\n| float32   | ±3.402 823 466 385 288 598 117 041 834 845 169 254 40x1038 计算精度大概是小数点后 7 个十进制数 |\n| float64   | ±1.797 693 134 862 315 708 145 274 237 317 043 567 981x1038 计算精度大概是小数点后 15 个十进制数 |\n| complex32 | 复数，实部和虚部都是 float32                                 |\n| complex64 | 复数，实部和虚部都是 float64                                 |\n\n* 布尔类型\n\n  `true`和`false`：布尔类型不能接受其他类型的赋值，不支持自动或强制的类型转换。\n\n* 字符串\n\n  * 字符串可以使用双引号`(\"\")`或者反引号来创建。双引号用来创建可解析的字符串字面量，可解析的是指字符串中的一些符号可以被格式化为其他内容，如 `\\n` 在在输出时候会被格式化成换行符，如果需要按照原始字符输出必须进行转义。而反引号创建的字符串原始是什么样，那输出还是什么，不需要进行任何转义。\n\n  * 支持切片操作：对字符串中字符依次访问，可以使用 `range` 操作符。获取字符串的长度可能有两种含义，一种是指获取字符串的字节长度，一种是指获取字符串的字符数量。\n\n  支持的操作\n\n| 语法             | 描述                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| `s += t`         | 将字符串 t 追加到 s 末尾                                     |\n| `s + t`          | 将字符串 s 和 t 级联                                         |\n| `s[n]`           | 从字符串 s 中索引位置为 n 处的原始字节                       |\n| `s[n:m]`         | 从位置 n 到位置 `m-1` 处取得的字符（字节）串                 |\n| `s[n:]`          | 从位置 n 到位置 `len(s)-1` 处取得的字符（字节）串            |\n| `s[:m]`          | 从位置 0 到位置 `m-1` 处取得的字符（字节）串                 |\n| `len(s)`         | 字符串 s 中的字节数                                          |\n| `len([]rune(s))` | 字符串 s 中字符的个数，可以使用更快的方法 `utf8.RuneCountInString()` |\n| `[]rune(s)`      | 将字符串 s 转换为一个 unicode 值组成的串                     |\n| `string(chars)`  | chars 类型是 `[]rune` 或者 `[]int32`, 将之转换为字符串       |\n| `[]byte(s)`      | 无副本的将字符串 s 转换为一个原始的字节的切片数组，不保证转换的字节是合法的 UTF-8 编码字节 |\n\n### 顺序编程\n\n* if\n\n  `if`后面可以紧接一个表达式`optionalStatement1`，表达式会在进入`block`前执行，决定进入`block`分支的是布尔表达式`booleanExpression1`\n\n```go\nif optionalStatement1; booleanExpression1 {\n    block1\n} else if optionalStatement2; booleanExpression2 {\n    block2\n} else {\n    block3\n}\n```\n\n* for\n\n  `for`循环可以遍历数组，切片，映射等类型，也可以用于无限循环\n\n```go\nfor { // 无限循环\n    block\n}\n\nfor booleanExpression { // while循环，在Go语言中没有while关键字\n\n}\n\nfor index, char := range aString { // 迭代字符串\n\n}\n\nfor item := range aChannel { // 迭代通道\n\n}\n```\n\n* goto\n\n  `goto`可以实现跳转，在程序代码前定义一个标签以后可以使用goto跳转到标签\n\n* switch\n\n**类型处理**\n\n* 类型转换\n\n* 类型断言\n\n  将空接口类型转化为我们所需要的类型，这个操作称为类型断言。（有点难懂）\n\n**defer**\n\n* 当函数执行到最后时，`defer`语句会按照逆序执行，最后该函数返回，`defer`会在`return`之后执行。\n\n### 面向对象编程\n\n* 自定义类型及结构体\n\n  Go的代码是以包结构来组织的，如果标识符（变量名，函数名，自定义类型），以大写字母开头的标识符是可以导出的，可以在任何导入了定义该标识符的包中使用，Go语言不支持继承，只支持组合。\n\n  * \n\n* 方法\n\n* 组合\n\n* 接口\n\n  > 接口是一组方法签名。当一个类型为接口中的所有方法提供定义时，它被称为实现该接口。接口指定类型应具有的方法，类型决定如何实现这些方法。\n\n  接口定义了一组方法的集合，任何类型只要实现了接口中定义的所有方法，就被认为实现了该接口。\n\n  接口在Go中的实现方式是隐式的，无需显性地声明，这种设计允许对象在不同的上下文中被看作是不同的类型，从而实现了多态性。\n\n```go\npackage main\n\nimport \"fmt\"\n\n// Animal 接口定义了 Speak 方法\ntype Animal interface {\n    Speak() string\n}\n\n// Dog 类型实现了 Animal 接口\ntype Dog struct{}\n\nfunc (d Dog) Speak() string {\n    return \"Woof!\"\n}\n\n// Cat 类型实现了 Animal 接口\ntype Cat struct{}\n\nfunc (c Cat) Speak() string {\n    return \"Meow!\"\n}\n\nfunc main() {\n    // 定义一个接口类型的变量\n    var animal Animal\n\n    // 可以将不同类型的对象赋值给接口变量\n    animal = Dog{}\n    fmt.Println(animal.Speak()) // 输出: Woof!\n\n    animal = Cat{}\n    fmt.Println(animal.Speak()) // 输出: Meow!\n}\n```\n\n","source":"_posts/Go语言学习笔记.md","raw":"---\ntitle: Go语言基本语法\ndate: 2023-12-14 17:16:50\ntags: [go语言 并发]\ncategories: 学习笔记\ncover:\ntop_img:\n---\n\n## 基本语法\n\n### GO语言特性\n\n* 并发编程\n\n  Go语言中引入了`goroutine`，通过调用`go`关键字，可以让函数以goroutine的方式进行运行，以协程为单位进行运行。\n\n  协程相比线程更加轻量级，也更节省系统资源。\n\n  goroutine内部采用管道`channel`进行消息传递，从而实现共享内存。\n\n* 错误处理\n\n  函数通过返回错误类型`error`或者`bool`类型表明函数执行结果，通过判断返回值是否为`nil`。\n\n  引入了defer关键字用于标准的错误处理流程，提供内置函数`panic`，`recover`完成异常抛出和捕捉\n\n* 垃圾回收\n\n  自带自动回收功能，不需要`delete`和`free`来释放内存\n\n* 多返回值\n\n  支持多返回值，可以用下划线作为占用符丢掉不要的返回值\n\n* 匿名函数\n\n  支持常规的匿名函数和闭包\n\n```go\n// hello.go\n\npackage main\n\nimport (\n    \"fmt\" //导入fmt包，调用其中的Println()函数\n)\n\nfunc main() {\n    fmt.Println(\"Hello，world！\")\n}\n```\n\n### 数据类型\n\n* 常量\n\n  使用`const`声明，可以限定常量类型，也可以不指定类型（称为字面常量）\n\n```\nconst limit = 512\nconst top uint16 = 1421\nconst Pi float64 = 3.1415926\n// 多重赋值\nconst x,y int = 1,2\n\n// 多个常量赋值\nconst (\n\tone = 1\n\ttwo = 2\n)\n```\n\n* iota\n\n  `iota`是一个可以被编译器修改的常量，在`const`关键字出现时被重置为`0`，在下一个`const`出现之前，每出现一次`iota`，所代表的数字自动加1\n\n```\nconst (\n    a = iota  //a == 0\n    b = iota  //b ==1\n    c = iota  //c == 2\n)\n\nconst d = iota //d==0,因为const的出现，iota被重置为0\n```\n\n* 变量\n\n  变量使用`var`进行声明，可以使用`:=`对变量之间进行初始化，Go编译器会自动推导出该变量的类型\n\n* 整型\n\n  可以通过`unsafe.Sizeof`函数来查看字节长度\n\n| 类型      | 说明                                                         |\n| :-------- | :----------------------------------------------------------- |\n| `byte`    | 等同于 uint8，uint8的别名                                    |\n| `int`     | 依赖于不同平台下的实现，可以是 int32 或者 int64              |\n| `int8`    | [-128, 127]                                                  |\n| `int16`   | [-32768, 32767]                                              |\n| `int32`   | [-2147483648, 2147483647]                                    |\n| `int64`   | [-9223372036854775808, 9223372036854775807]                  |\n| `rune`    | 等同于 int32，代表Unicode字符类型                            |\n| `uint`    | 依赖于不同平台下的实现，可以是 uint32 或者 uint64            |\n| `uint8`   | [0, 255]                                                     |\n| `uint16`  | [0, 65535]                                                   |\n| `uint32`  | [0, 4294967295]                                              |\n| `uint64`  | [0, 18446744073709551615]                                    |\n| `uintptr` | 一个可以恰好容纳指针值的无符号整型（对 32 位平台是 uint32, 对 64 位平台是 uint64） |\n\n* 浮点类型\n\n| 类型      | 说明                                                         |\n| --------- | ------------------------------------------------------------ |\n| float32   | ±3.402 823 466 385 288 598 117 041 834 845 169 254 40x1038 计算精度大概是小数点后 7 个十进制数 |\n| float64   | ±1.797 693 134 862 315 708 145 274 237 317 043 567 981x1038 计算精度大概是小数点后 15 个十进制数 |\n| complex32 | 复数，实部和虚部都是 float32                                 |\n| complex64 | 复数，实部和虚部都是 float64                                 |\n\n* 布尔类型\n\n  `true`和`false`：布尔类型不能接受其他类型的赋值，不支持自动或强制的类型转换。\n\n* 字符串\n\n  * 字符串可以使用双引号`(\"\")`或者反引号来创建。双引号用来创建可解析的字符串字面量，可解析的是指字符串中的一些符号可以被格式化为其他内容，如 `\\n` 在在输出时候会被格式化成换行符，如果需要按照原始字符输出必须进行转义。而反引号创建的字符串原始是什么样，那输出还是什么，不需要进行任何转义。\n\n  * 支持切片操作：对字符串中字符依次访问，可以使用 `range` 操作符。获取字符串的长度可能有两种含义，一种是指获取字符串的字节长度，一种是指获取字符串的字符数量。\n\n  支持的操作\n\n| 语法             | 描述                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| `s += t`         | 将字符串 t 追加到 s 末尾                                     |\n| `s + t`          | 将字符串 s 和 t 级联                                         |\n| `s[n]`           | 从字符串 s 中索引位置为 n 处的原始字节                       |\n| `s[n:m]`         | 从位置 n 到位置 `m-1` 处取得的字符（字节）串                 |\n| `s[n:]`          | 从位置 n 到位置 `len(s)-1` 处取得的字符（字节）串            |\n| `s[:m]`          | 从位置 0 到位置 `m-1` 处取得的字符（字节）串                 |\n| `len(s)`         | 字符串 s 中的字节数                                          |\n| `len([]rune(s))` | 字符串 s 中字符的个数，可以使用更快的方法 `utf8.RuneCountInString()` |\n| `[]rune(s)`      | 将字符串 s 转换为一个 unicode 值组成的串                     |\n| `string(chars)`  | chars 类型是 `[]rune` 或者 `[]int32`, 将之转换为字符串       |\n| `[]byte(s)`      | 无副本的将字符串 s 转换为一个原始的字节的切片数组，不保证转换的字节是合法的 UTF-8 编码字节 |\n\n### 顺序编程\n\n* if\n\n  `if`后面可以紧接一个表达式`optionalStatement1`，表达式会在进入`block`前执行，决定进入`block`分支的是布尔表达式`booleanExpression1`\n\n```go\nif optionalStatement1; booleanExpression1 {\n    block1\n} else if optionalStatement2; booleanExpression2 {\n    block2\n} else {\n    block3\n}\n```\n\n* for\n\n  `for`循环可以遍历数组，切片，映射等类型，也可以用于无限循环\n\n```go\nfor { // 无限循环\n    block\n}\n\nfor booleanExpression { // while循环，在Go语言中没有while关键字\n\n}\n\nfor index, char := range aString { // 迭代字符串\n\n}\n\nfor item := range aChannel { // 迭代通道\n\n}\n```\n\n* goto\n\n  `goto`可以实现跳转，在程序代码前定义一个标签以后可以使用goto跳转到标签\n\n* switch\n\n**类型处理**\n\n* 类型转换\n\n* 类型断言\n\n  将空接口类型转化为我们所需要的类型，这个操作称为类型断言。（有点难懂）\n\n**defer**\n\n* 当函数执行到最后时，`defer`语句会按照逆序执行，最后该函数返回，`defer`会在`return`之后执行。\n\n### 面向对象编程\n\n* 自定义类型及结构体\n\n  Go的代码是以包结构来组织的，如果标识符（变量名，函数名，自定义类型），以大写字母开头的标识符是可以导出的，可以在任何导入了定义该标识符的包中使用，Go语言不支持继承，只支持组合。\n\n  * \n\n* 方法\n\n* 组合\n\n* 接口\n\n  > 接口是一组方法签名。当一个类型为接口中的所有方法提供定义时，它被称为实现该接口。接口指定类型应具有的方法，类型决定如何实现这些方法。\n\n  接口定义了一组方法的集合，任何类型只要实现了接口中定义的所有方法，就被认为实现了该接口。\n\n  接口在Go中的实现方式是隐式的，无需显性地声明，这种设计允许对象在不同的上下文中被看作是不同的类型，从而实现了多态性。\n\n```go\npackage main\n\nimport \"fmt\"\n\n// Animal 接口定义了 Speak 方法\ntype Animal interface {\n    Speak() string\n}\n\n// Dog 类型实现了 Animal 接口\ntype Dog struct{}\n\nfunc (d Dog) Speak() string {\n    return \"Woof!\"\n}\n\n// Cat 类型实现了 Animal 接口\ntype Cat struct{}\n\nfunc (c Cat) Speak() string {\n    return \"Meow!\"\n}\n\nfunc main() {\n    // 定义一个接口类型的变量\n    var animal Animal\n\n    // 可以将不同类型的对象赋值给接口变量\n    animal = Dog{}\n    fmt.Println(animal.Speak()) // 输出: Woof!\n\n    animal = Cat{}\n    fmt.Println(animal.Speak()) // 输出: Meow!\n}\n```\n\n","slug":"Go语言学习笔记","published":1,"updated":"2024-02-09T04:57:09.543Z","comments":1,"layout":"post","photos":[],"_id":"clseauyn00001ngdf5ollfa34","content":"<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"GO语言特性\"><a href=\"#GO语言特性\" class=\"headerlink\" title=\"GO语言特性\"></a>GO语言特性</h3><ul>\n<li><p>并发编程</p>\n<p>Go语言中引入了<code>goroutine</code>，通过调用<code>go</code>关键字，可以让函数以goroutine的方式进行运行，以协程为单位进行运行。</p>\n<p>协程相比线程更加轻量级，也更节省系统资源。</p>\n<p>goroutine内部采用管道<code>channel</code>进行消息传递，从而实现共享内存。</p>\n</li>\n<li><p>错误处理</p>\n<p>函数通过返回错误类型<code>error</code>或者<code>bool</code>类型表明函数执行结果，通过判断返回值是否为<code>nil</code>。</p>\n<p>引入了defer关键字用于标准的错误处理流程，提供内置函数<code>panic</code>，<code>recover</code>完成异常抛出和捕捉</p>\n</li>\n<li><p>垃圾回收</p>\n<p>自带自动回收功能，不需要<code>delete</code>和<code>free</code>来释放内存</p>\n</li>\n<li><p>多返回值</p>\n<p>支持多返回值，可以用下划线作为占用符丢掉不要的返回值</p>\n</li>\n<li><p>匿名函数</p>\n<p>支持常规的匿名函数和闭包</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// hello.go</span><br><br><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>    <span class=\"hljs-string\">&quot;fmt&quot;</span> <span class=\"hljs-comment\">//导入fmt包，调用其中的Println()函数</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    fmt.Println(<span class=\"hljs-string\">&quot;Hello，world！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li><p>常量</p>\n<p>使用<code>const</code>声明，可以限定常量类型，也可以不指定类型（称为字面常量）</p>\n</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">const</span> limit = <span class=\"hljs-number\">512</span><br><span class=\"hljs-keyword\">const</span> top <span class=\"hljs-built_in\">uint16</span> = <span class=\"hljs-number\">1421</span><br><span class=\"hljs-keyword\">const</span> Pi <span class=\"hljs-built_in\">float</span>64 = <span class=\"hljs-number\">3.1415926</span><br><span class=\"hljs-comment\">// 多重赋值</span><br><span class=\"hljs-keyword\">const</span> x,y <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\">// 多个常量赋值</span><br><span class=\"hljs-keyword\">const</span> (<br>\tone = <span class=\"hljs-number\">1</span><br>\ttwo = <span class=\"hljs-number\">2</span><br>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>iota</p>\n<p><code>iota</code>是一个可以被编译器修改的常量，在<code>const</code>关键字出现时被重置为<code>0</code>，在下一个<code>const</code>出现之前，每出现一次<code>iota</code>，所代表的数字自动加1</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">const</span> (<br>    a = <span class=\"hljs-literal\">iota</span>  <span class=\"hljs-comment\">//a == 0</span><br>    b = <span class=\"hljs-literal\">iota</span>  <span class=\"hljs-comment\">//b ==1</span><br>    c = <span class=\"hljs-literal\">iota</span>  <span class=\"hljs-comment\">//c == 2</span><br>)<br><br><span class=\"hljs-keyword\">const</span> d = <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">//d==0,因为const的出现，iota被重置为0</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>变量</p>\n<p>变量使用<code>var</code>进行声明，可以使用<code>:=</code>对变量之间进行初始化，Go编译器会自动推导出该变量的类型</p>\n</li>\n<li><p>整型</p>\n<p>可以通过<code>unsafe.Sizeof</code>函数来查看字节长度</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>byte</code></td>\n<td style=\"text-align:left\">等同于 uint8，uint8的别名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int</code></td>\n<td style=\"text-align:left\">依赖于不同平台下的实现，可以是 int32 或者 int64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int8</code></td>\n<td style=\"text-align:left\">[-128, 127]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int16</code></td>\n<td style=\"text-align:left\">[-32768, 32767]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int32</code></td>\n<td style=\"text-align:left\">[-2147483648, 2147483647]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int64</code></td>\n<td style=\"text-align:left\">[-9223372036854775808, 9223372036854775807]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rune</code></td>\n<td style=\"text-align:left\">等同于 int32，代表Unicode字符类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint</code></td>\n<td style=\"text-align:left\">依赖于不同平台下的实现，可以是 uint32 或者 uint64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint8</code></td>\n<td style=\"text-align:left\">[0, 255]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint16</code></td>\n<td style=\"text-align:left\">[0, 65535]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint32</code></td>\n<td style=\"text-align:left\">[0, 4294967295]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint64</code></td>\n<td style=\"text-align:left\">[0, 18446744073709551615]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uintptr</code></td>\n<td style=\"text-align:left\">一个可以恰好容纳指针值的无符号整型（对 32 位平台是 uint32, 对 64 位平台是 uint64）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>浮点类型</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float32</td>\n<td>±3.402 823 466 385 288 598 117 041 834 845 169 254 40x1038 计算精度大概是小数点后 7 个十进制数</td>\n</tr>\n<tr>\n<td>float64</td>\n<td>±1.797 693 134 862 315 708 145 274 237 317 043 567 981x1038 计算精度大概是小数点后 15 个十进制数</td>\n</tr>\n<tr>\n<td>complex32</td>\n<td>复数，实部和虚部都是 float32</td>\n</tr>\n<tr>\n<td>complex64</td>\n<td>复数，实部和虚部都是 float64</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>布尔类型</p>\n<p><code>true</code>和<code>false</code>：布尔类型不能接受其他类型的赋值，不支持自动或强制的类型转换。</p>\n</li>\n<li><p>字符串</p>\n<ul>\n<li><p>字符串可以使用双引号<code>(&quot;&quot;)</code>或者反引号来创建。双引号用来创建可解析的字符串字面量，可解析的是指字符串中的一些符号可以被格式化为其他内容，如 <code>\\n</code> 在在输出时候会被格式化成换行符，如果需要按照原始字符输出必须进行转义。而反引号创建的字符串原始是什么样，那输出还是什么，不需要进行任何转义。</p>\n</li>\n<li><p>支持切片操作：对字符串中字符依次访问，可以使用 <code>range</code> 操作符。获取字符串的长度可能有两种含义，一种是指获取字符串的字节长度，一种是指获取字符串的字符数量。</p>\n</li>\n</ul>\n<p>支持的操作</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>s += t</code></td>\n<td>将字符串 t 追加到 s 末尾</td>\n</tr>\n<tr>\n<td><code>s + t</code></td>\n<td>将字符串 s 和 t 级联</td>\n</tr>\n<tr>\n<td><code>s[n]</code></td>\n<td>从字符串 s 中索引位置为 n 处的原始字节</td>\n</tr>\n<tr>\n<td><code>s[n:m]</code></td>\n<td>从位置 n 到位置 <code>m-1</code> 处取得的字符（字节）串</td>\n</tr>\n<tr>\n<td><code>s[n:]</code></td>\n<td>从位置 n 到位置 <code>len(s)-1</code> 处取得的字符（字节）串</td>\n</tr>\n<tr>\n<td><code>s[:m]</code></td>\n<td>从位置 0 到位置 <code>m-1</code> 处取得的字符（字节）串</td>\n</tr>\n<tr>\n<td><code>len(s)</code></td>\n<td>字符串 s 中的字节数</td>\n</tr>\n<tr>\n<td><code>len([]rune(s))</code></td>\n<td>字符串 s 中字符的个数，可以使用更快的方法 <code>utf8.RuneCountInString()</code></td>\n</tr>\n<tr>\n<td><code>[]rune(s)</code></td>\n<td>将字符串 s 转换为一个 unicode 值组成的串</td>\n</tr>\n<tr>\n<td><code>string(chars)</code></td>\n<td>chars 类型是 <code>[]rune</code> 或者 <code>[]int32</code>, 将之转换为字符串</td>\n</tr>\n<tr>\n<td><code>[]byte(s)</code></td>\n<td>无副本的将字符串 s 转换为一个原始的字节的切片数组，不保证转换的字节是合法的 UTF-8 编码字节</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"顺序编程\"><a href=\"#顺序编程\" class=\"headerlink\" title=\"顺序编程\"></a>顺序编程</h3><ul>\n<li><p>if</p>\n<p><code>if</code>后面可以紧接一个表达式<code>optionalStatement1</code>，表达式会在进入<code>block</code>前执行，决定进入<code>block</code>分支的是布尔表达式<code>booleanExpression1</code></p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">if</span> optionalStatement1; booleanExpression1 &#123;<br>    block1<br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> optionalStatement2; booleanExpression2 &#123;<br>    block2<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    block3<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>for</p>\n<p><code>for</code>循环可以遍历数组，切片，映射等类型，也可以用于无限循环</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">for</span> &#123; <span class=\"hljs-comment\">// 无限循环</span><br>    block<br>&#125;<br><br><span class=\"hljs-keyword\">for</span> booleanExpression &#123; <span class=\"hljs-comment\">// while循环，在Go语言中没有while关键字</span><br><br>&#125;<br><br><span class=\"hljs-keyword\">for</span> index, char := <span class=\"hljs-keyword\">range</span> aString &#123; <span class=\"hljs-comment\">// 迭代字符串</span><br><br>&#125;<br><br><span class=\"hljs-keyword\">for</span> item := <span class=\"hljs-keyword\">range</span> aChannel &#123; <span class=\"hljs-comment\">// 迭代通道</span><br><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>goto</p>\n<p><code>goto</code>可以实现跳转，在程序代码前定义一个标签以后可以使用goto跳转到标签</p>\n</li>\n<li><p>switch</p>\n</li>\n</ul>\n<p><strong>类型处理</strong></p>\n<ul>\n<li><p>类型转换</p>\n</li>\n<li><p>类型断言</p>\n<p>将空接口类型转化为我们所需要的类型，这个操作称为类型断言。（有点难懂）</p>\n</li>\n</ul>\n<p><strong>defer</strong></p>\n<ul>\n<li>当函数执行到最后时，<code>defer</code>语句会按照逆序执行，最后该函数返回，<code>defer</code>会在<code>return</code>之后执行。</li>\n</ul>\n<h3 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h3><ul>\n<li><p>自定义类型及结构体</p>\n<p>Go的代码是以包结构来组织的，如果标识符（变量名，函数名，自定义类型），以大写字母开头的标识符是可以导出的，可以在任何导入了定义该标识符的包中使用，Go语言不支持继承，只支持组合。</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>方法</p>\n</li>\n<li><p>组合</p>\n</li>\n<li><p>接口</p>\n<blockquote>\n<p>接口是一组方法签名。当一个类型为接口中的所有方法提供定义时，它被称为实现该接口。接口指定类型应具有的方法，类型决定如何实现这些方法。</p>\n</blockquote>\n<p>接口定义了一组方法的集合，任何类型只要实现了接口中定义的所有方法，就被认为实现了该接口。</p>\n<p>接口在Go中的实现方式是隐式的，无需显性地声明，这种设计允许对象在不同的上下文中被看作是不同的类型，从而实现了多态性。</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">// Animal 接口定义了 Speak 方法</span><br><span class=\"hljs-keyword\">type</span> Animal <span class=\"hljs-keyword\">interface</span> &#123;<br>    Speak() <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-comment\">// Dog 类型实现了 Animal 接口</span><br><span class=\"hljs-keyword\">type</span> Dog <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d Dog)</span></span> Speak() <span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Woof!&quot;</span><br>&#125;<br><br><span class=\"hljs-comment\">// Cat 类型实现了 Animal 接口</span><br><span class=\"hljs-keyword\">type</span> Cat <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c Cat)</span></span> Speak() <span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Meow!&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    <span class=\"hljs-comment\">// 定义一个接口类型的变量</span><br>    <span class=\"hljs-keyword\">var</span> animal Animal<br><br>    <span class=\"hljs-comment\">// 可以将不同类型的对象赋值给接口变量</span><br>    animal = Dog&#123;&#125;<br>    fmt.Println(animal.Speak()) <span class=\"hljs-comment\">// 输出: Woof!</span><br><br>    animal = Cat&#123;&#125;<br>    fmt.Println(animal.Speak()) <span class=\"hljs-comment\">// 输出: Meow!</span><br>&#125;<br></code></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"GO语言特性\"><a href=\"#GO语言特性\" class=\"headerlink\" title=\"GO语言特性\"></a>GO语言特性</h3><ul>\n<li><p>并发编程</p>\n<p>Go语言中引入了<code>goroutine</code>，通过调用<code>go</code>关键字，可以让函数以goroutine的方式进行运行，以协程为单位进行运行。</p>\n<p>协程相比线程更加轻量级，也更节省系统资源。</p>\n<p>goroutine内部采用管道<code>channel</code>进行消息传递，从而实现共享内存。</p>\n</li>\n<li><p>错误处理</p>\n<p>函数通过返回错误类型<code>error</code>或者<code>bool</code>类型表明函数执行结果，通过判断返回值是否为<code>nil</code>。</p>\n<p>引入了defer关键字用于标准的错误处理流程，提供内置函数<code>panic</code>，<code>recover</code>完成异常抛出和捕捉</p>\n</li>\n<li><p>垃圾回收</p>\n<p>自带自动回收功能，不需要<code>delete</code>和<code>free</code>来释放内存</p>\n</li>\n<li><p>多返回值</p>\n<p>支持多返回值，可以用下划线作为占用符丢掉不要的返回值</p>\n</li>\n<li><p>匿名函数</p>\n<p>支持常规的匿名函数和闭包</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-comment\">// hello.go</span><br><br><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>    <span class=\"hljs-string\">&quot;fmt&quot;</span> <span class=\"hljs-comment\">//导入fmt包，调用其中的Println()函数</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    fmt.Println(<span class=\"hljs-string\">&quot;Hello，world！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li><p>常量</p>\n<p>使用<code>const</code>声明，可以限定常量类型，也可以不指定类型（称为字面常量）</p>\n</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">const</span> limit = <span class=\"hljs-number\">512</span><br><span class=\"hljs-keyword\">const</span> top <span class=\"hljs-built_in\">uint16</span> = <span class=\"hljs-number\">1421</span><br><span class=\"hljs-keyword\">const</span> Pi <span class=\"hljs-built_in\">float</span>64 = <span class=\"hljs-number\">3.1415926</span><br><span class=\"hljs-comment\">// 多重赋值</span><br><span class=\"hljs-keyword\">const</span> x,y <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\">// 多个常量赋值</span><br><span class=\"hljs-keyword\">const</span> (<br>\tone = <span class=\"hljs-number\">1</span><br>\ttwo = <span class=\"hljs-number\">2</span><br>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>iota</p>\n<p><code>iota</code>是一个可以被编译器修改的常量，在<code>const</code>关键字出现时被重置为<code>0</code>，在下一个<code>const</code>出现之前，每出现一次<code>iota</code>，所代表的数字自动加1</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">const</span> (<br>    a = <span class=\"hljs-literal\">iota</span>  <span class=\"hljs-comment\">//a == 0</span><br>    b = <span class=\"hljs-literal\">iota</span>  <span class=\"hljs-comment\">//b ==1</span><br>    c = <span class=\"hljs-literal\">iota</span>  <span class=\"hljs-comment\">//c == 2</span><br>)<br><br><span class=\"hljs-keyword\">const</span> d = <span class=\"hljs-literal\">iota</span> <span class=\"hljs-comment\">//d==0,因为const的出现，iota被重置为0</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>变量</p>\n<p>变量使用<code>var</code>进行声明，可以使用<code>:=</code>对变量之间进行初始化，Go编译器会自动推导出该变量的类型</p>\n</li>\n<li><p>整型</p>\n<p>可以通过<code>unsafe.Sizeof</code>函数来查看字节长度</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>byte</code></td>\n<td style=\"text-align:left\">等同于 uint8，uint8的别名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int</code></td>\n<td style=\"text-align:left\">依赖于不同平台下的实现，可以是 int32 或者 int64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int8</code></td>\n<td style=\"text-align:left\">[-128, 127]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int16</code></td>\n<td style=\"text-align:left\">[-32768, 32767]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int32</code></td>\n<td style=\"text-align:left\">[-2147483648, 2147483647]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int64</code></td>\n<td style=\"text-align:left\">[-9223372036854775808, 9223372036854775807]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rune</code></td>\n<td style=\"text-align:left\">等同于 int32，代表Unicode字符类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint</code></td>\n<td style=\"text-align:left\">依赖于不同平台下的实现，可以是 uint32 或者 uint64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint8</code></td>\n<td style=\"text-align:left\">[0, 255]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint16</code></td>\n<td style=\"text-align:left\">[0, 65535]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint32</code></td>\n<td style=\"text-align:left\">[0, 4294967295]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uint64</code></td>\n<td style=\"text-align:left\">[0, 18446744073709551615]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>uintptr</code></td>\n<td style=\"text-align:left\">一个可以恰好容纳指针值的无符号整型（对 32 位平台是 uint32, 对 64 位平台是 uint64）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>浮点类型</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float32</td>\n<td>±3.402 823 466 385 288 598 117 041 834 845 169 254 40x1038 计算精度大概是小数点后 7 个十进制数</td>\n</tr>\n<tr>\n<td>float64</td>\n<td>±1.797 693 134 862 315 708 145 274 237 317 043 567 981x1038 计算精度大概是小数点后 15 个十进制数</td>\n</tr>\n<tr>\n<td>complex32</td>\n<td>复数，实部和虚部都是 float32</td>\n</tr>\n<tr>\n<td>complex64</td>\n<td>复数，实部和虚部都是 float64</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>布尔类型</p>\n<p><code>true</code>和<code>false</code>：布尔类型不能接受其他类型的赋值，不支持自动或强制的类型转换。</p>\n</li>\n<li><p>字符串</p>\n<ul>\n<li><p>字符串可以使用双引号<code>(&quot;&quot;)</code>或者反引号来创建。双引号用来创建可解析的字符串字面量，可解析的是指字符串中的一些符号可以被格式化为其他内容，如 <code>\\n</code> 在在输出时候会被格式化成换行符，如果需要按照原始字符输出必须进行转义。而反引号创建的字符串原始是什么样，那输出还是什么，不需要进行任何转义。</p>\n</li>\n<li><p>支持切片操作：对字符串中字符依次访问，可以使用 <code>range</code> 操作符。获取字符串的长度可能有两种含义，一种是指获取字符串的字节长度，一种是指获取字符串的字符数量。</p>\n</li>\n</ul>\n<p>支持的操作</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>s += t</code></td>\n<td>将字符串 t 追加到 s 末尾</td>\n</tr>\n<tr>\n<td><code>s + t</code></td>\n<td>将字符串 s 和 t 级联</td>\n</tr>\n<tr>\n<td><code>s[n]</code></td>\n<td>从字符串 s 中索引位置为 n 处的原始字节</td>\n</tr>\n<tr>\n<td><code>s[n:m]</code></td>\n<td>从位置 n 到位置 <code>m-1</code> 处取得的字符（字节）串</td>\n</tr>\n<tr>\n<td><code>s[n:]</code></td>\n<td>从位置 n 到位置 <code>len(s)-1</code> 处取得的字符（字节）串</td>\n</tr>\n<tr>\n<td><code>s[:m]</code></td>\n<td>从位置 0 到位置 <code>m-1</code> 处取得的字符（字节）串</td>\n</tr>\n<tr>\n<td><code>len(s)</code></td>\n<td>字符串 s 中的字节数</td>\n</tr>\n<tr>\n<td><code>len([]rune(s))</code></td>\n<td>字符串 s 中字符的个数，可以使用更快的方法 <code>utf8.RuneCountInString()</code></td>\n</tr>\n<tr>\n<td><code>[]rune(s)</code></td>\n<td>将字符串 s 转换为一个 unicode 值组成的串</td>\n</tr>\n<tr>\n<td><code>string(chars)</code></td>\n<td>chars 类型是 <code>[]rune</code> 或者 <code>[]int32</code>, 将之转换为字符串</td>\n</tr>\n<tr>\n<td><code>[]byte(s)</code></td>\n<td>无副本的将字符串 s 转换为一个原始的字节的切片数组，不保证转换的字节是合法的 UTF-8 编码字节</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"顺序编程\"><a href=\"#顺序编程\" class=\"headerlink\" title=\"顺序编程\"></a>顺序编程</h3><ul>\n<li><p>if</p>\n<p><code>if</code>后面可以紧接一个表达式<code>optionalStatement1</code>，表达式会在进入<code>block</code>前执行，决定进入<code>block</code>分支的是布尔表达式<code>booleanExpression1</code></p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">if</span> optionalStatement1; booleanExpression1 &#123;<br>    block1<br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> optionalStatement2; booleanExpression2 &#123;<br>    block2<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    block3<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>for</p>\n<p><code>for</code>循环可以遍历数组，切片，映射等类型，也可以用于无限循环</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">for</span> &#123; <span class=\"hljs-comment\">// 无限循环</span><br>    block<br>&#125;<br><br><span class=\"hljs-keyword\">for</span> booleanExpression &#123; <span class=\"hljs-comment\">// while循环，在Go语言中没有while关键字</span><br><br>&#125;<br><br><span class=\"hljs-keyword\">for</span> index, char := <span class=\"hljs-keyword\">range</span> aString &#123; <span class=\"hljs-comment\">// 迭代字符串</span><br><br>&#125;<br><br><span class=\"hljs-keyword\">for</span> item := <span class=\"hljs-keyword\">range</span> aChannel &#123; <span class=\"hljs-comment\">// 迭代通道</span><br><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>goto</p>\n<p><code>goto</code>可以实现跳转，在程序代码前定义一个标签以后可以使用goto跳转到标签</p>\n</li>\n<li><p>switch</p>\n</li>\n</ul>\n<p><strong>类型处理</strong></p>\n<ul>\n<li><p>类型转换</p>\n</li>\n<li><p>类型断言</p>\n<p>将空接口类型转化为我们所需要的类型，这个操作称为类型断言。（有点难懂）</p>\n</li>\n</ul>\n<p><strong>defer</strong></p>\n<ul>\n<li>当函数执行到最后时，<code>defer</code>语句会按照逆序执行，最后该函数返回，<code>defer</code>会在<code>return</code>之后执行。</li>\n</ul>\n<h3 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h3><ul>\n<li><p>自定义类型及结构体</p>\n<p>Go的代码是以包结构来组织的，如果标识符（变量名，函数名，自定义类型），以大写字母开头的标识符是可以导出的，可以在任何导入了定义该标识符的包中使用，Go语言不支持继承，只支持组合。</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>方法</p>\n</li>\n<li><p>组合</p>\n</li>\n<li><p>接口</p>\n<blockquote>\n<p>接口是一组方法签名。当一个类型为接口中的所有方法提供定义时，它被称为实现该接口。接口指定类型应具有的方法，类型决定如何实现这些方法。</p>\n</blockquote>\n<p>接口定义了一组方法的集合，任何类型只要实现了接口中定义的所有方法，就被认为实现了该接口。</p>\n<p>接口在Go中的实现方式是隐式的，无需显性地声明，这种设计允许对象在不同的上下文中被看作是不同的类型，从而实现了多态性。</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">// Animal 接口定义了 Speak 方法</span><br><span class=\"hljs-keyword\">type</span> Animal <span class=\"hljs-keyword\">interface</span> &#123;<br>    Speak() <span class=\"hljs-type\">string</span><br>&#125;<br><br><span class=\"hljs-comment\">// Dog 类型实现了 Animal 接口</span><br><span class=\"hljs-keyword\">type</span> Dog <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d Dog)</span></span> Speak() <span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Woof!&quot;</span><br>&#125;<br><br><span class=\"hljs-comment\">// Cat 类型实现了 Animal 接口</span><br><span class=\"hljs-keyword\">type</span> Cat <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c Cat)</span></span> Speak() <span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Meow!&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>    <span class=\"hljs-comment\">// 定义一个接口类型的变量</span><br>    <span class=\"hljs-keyword\">var</span> animal Animal<br><br>    <span class=\"hljs-comment\">// 可以将不同类型的对象赋值给接口变量</span><br>    animal = Dog&#123;&#125;<br>    fmt.Println(animal.Speak()) <span class=\"hljs-comment\">// 输出: Woof!</span><br><br>    animal = Cat&#123;&#125;<br>    fmt.Println(animal.Speak()) <span class=\"hljs-comment\">// 输出: Meow!</span><br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"C++使用zlib库来压缩文件","date":"2024-01-26T02:34:44.000Z","cover":"/img/default_cover04.jpg","top_img":null,"_content":"\n## C++使用zlib库来压缩文件\n\nzlib压缩库提供内存压缩和解压缩功能，包括对未压缩的完整性检查数据，提供支持的压缩方法为：deflation，默认使用压缩数据格式为zlib格式。\n\nzlib库支持读取和写入gzip(.gz)格式的文件，zlib格式旨在紧凑且快速，可用于内存和通信渠道。gzip格式设计用于文件系统上的单文件压缩，比zlib具有更大的头部以维护目录信息，并且使用与zlib不同且更慢的检查方法。\n\n该库不安装任何信号处理程序。解码器检查压缩数据的一致性，因此即使在输入损坏的情况下，库也不应崩溃。\n\n### 数据流结构\n\n```\ntypedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size);\ntypedef void   (*free_func)(voidpf opaque, voidpf address);\n```\n\n* `typedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size);`这个函数指针通常用于内存分配，允许用户自定义的内存分配函数\n* `typedef void   (*free_func)(voidpf opaque, voidpf address);`这个函数指针通常用于内存释放，允许用户自定义的内存释放函数\n\n### 基本功能\n\n```\nZEXTERN int ZEXPORT deflateInit(z_streamp strm, int level);\n```\n\n* `level`表示压缩级别，要么为`Z_DEFAULT_COMPRESSION`，要么介于0-9之间，1表示最佳速度，9表示最佳压缩，0表示没有压缩，`Z_DEFAULT_COMPRESSION`默认在6级别。\n* `deflateInit` 返回 `Z_OK` 如果成功，则返回 `Z_MEM_ERROR` 如果没有 足够的内存，`Z_STREAM_ERROR` `level` 不是有效的压缩级别，`Z_VERSION_ERROR` *zlib* 库版本 （`zlib_version`） 不兼容 替换为调用方 （`ZLIB_VERSION`） 假定的版本。如果没有错误消息，`则 msg` 设置为 null。`deflateInit` 不 执行任何压缩：这将由 `deflate（）` 完成。\n\n```\nZEXTERN int ZEXPORT deflate(z_streamp strm, int flush);\n```\n\n","source":"_posts/C-使用zlib库来压缩文件.md","raw":"---\ntitle: C++使用zlib库来压缩文件\ndate: 2024-01-26 10:34:44\ntags: [C++, zlib]\ncategories: 技术研究\ncover:\ntop_img:\n---\n\n## C++使用zlib库来压缩文件\n\nzlib压缩库提供内存压缩和解压缩功能，包括对未压缩的完整性检查数据，提供支持的压缩方法为：deflation，默认使用压缩数据格式为zlib格式。\n\nzlib库支持读取和写入gzip(.gz)格式的文件，zlib格式旨在紧凑且快速，可用于内存和通信渠道。gzip格式设计用于文件系统上的单文件压缩，比zlib具有更大的头部以维护目录信息，并且使用与zlib不同且更慢的检查方法。\n\n该库不安装任何信号处理程序。解码器检查压缩数据的一致性，因此即使在输入损坏的情况下，库也不应崩溃。\n\n### 数据流结构\n\n```\ntypedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size);\ntypedef void   (*free_func)(voidpf opaque, voidpf address);\n```\n\n* `typedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size);`这个函数指针通常用于内存分配，允许用户自定义的内存分配函数\n* `typedef void   (*free_func)(voidpf opaque, voidpf address);`这个函数指针通常用于内存释放，允许用户自定义的内存释放函数\n\n### 基本功能\n\n```\nZEXTERN int ZEXPORT deflateInit(z_streamp strm, int level);\n```\n\n* `level`表示压缩级别，要么为`Z_DEFAULT_COMPRESSION`，要么介于0-9之间，1表示最佳速度，9表示最佳压缩，0表示没有压缩，`Z_DEFAULT_COMPRESSION`默认在6级别。\n* `deflateInit` 返回 `Z_OK` 如果成功，则返回 `Z_MEM_ERROR` 如果没有 足够的内存，`Z_STREAM_ERROR` `level` 不是有效的压缩级别，`Z_VERSION_ERROR` *zlib* 库版本 （`zlib_version`） 不兼容 替换为调用方 （`ZLIB_VERSION`） 假定的版本。如果没有错误消息，`则 msg` 设置为 null。`deflateInit` 不 执行任何压缩：这将由 `deflate（）` 完成。\n\n```\nZEXTERN int ZEXPORT deflate(z_streamp strm, int flush);\n```\n\n","slug":"C-使用zlib库来压缩文件","published":1,"updated":"2024-02-09T04:56:41.509Z","comments":1,"layout":"post","photos":[],"_id":"clseauyn20003ngdf0p6qbhk5","content":"<h2 id=\"C-使用zlib库来压缩文件\"><a href=\"#C-使用zlib库来压缩文件\" class=\"headerlink\" title=\"C++使用zlib库来压缩文件\"></a>C++使用zlib库来压缩文件</h2><p>zlib压缩库提供内存压缩和解压缩功能，包括对未压缩的完整性检查数据，提供支持的压缩方法为：deflation，默认使用压缩数据格式为zlib格式。</p>\n<p>zlib库支持读取和写入gzip(.gz)格式的文件，zlib格式旨在紧凑且快速，可用于内存和通信渠道。gzip格式设计用于文件系统上的单文件压缩，比zlib具有更大的头部以维护目录信息，并且使用与zlib不同且更慢的检查方法。</p>\n<p>该库不安装任何信号处理程序。解码器检查压缩数据的一致性，因此即使在输入损坏的情况下，库也不应崩溃。</p>\n<h3 id=\"数据流结构\"><a href=\"#数据流结构\" class=\"headerlink\" title=\"数据流结构\"></a>数据流结构</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-built_in\">void</span>pf (*alloc_func)(<span class=\"hljs-built_in\">void</span>pf opaque, uInt items, uInt size);<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-built_in\">void</span>   (*free_func)(<span class=\"hljs-built_in\">void</span>pf opaque, <span class=\"hljs-built_in\">void</span>pf address);<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>typedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size);</code>这个函数指针通常用于内存分配，允许用户自定义的内存分配函数</li>\n<li><code>typedef void   (*free_func)(voidpf opaque, voidpf address);</code>这个函数指针通常用于内存释放，允许用户自定义的内存释放函数</li>\n</ul>\n<h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\">ZEXTERN <span class=\"hljs-type\">int</span> ZEXPORT <span class=\"hljs-title\">deflateInit</span><span class=\"hljs-params\">(z_streamp strm, <span class=\"hljs-type\">int</span> level)</span></span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>level</code>表示压缩级别，要么为<code>Z_DEFAULT_COMPRESSION</code>，要么介于0-9之间，1表示最佳速度，9表示最佳压缩，0表示没有压缩，<code>Z_DEFAULT_COMPRESSION</code>默认在6级别。</li>\n<li><code>deflateInit</code> 返回 <code>Z_OK</code> 如果成功，则返回 <code>Z_MEM_ERROR</code> 如果没有 足够的内存，<code>Z_STREAM_ERROR</code> <code>level</code> 不是有效的压缩级别，<code>Z_VERSION_ERROR</code> <em>zlib</em> 库版本 （<code>zlib_version</code>） 不兼容 替换为调用方 （<code>ZLIB_VERSION</code>） 假定的版本。如果没有错误消息，<code>则 msg</code> 设置为 null。<code>deflateInit</code> 不 执行任何压缩：这将由 <code>deflate（）</code> 完成。</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\">ZEXTERN <span class=\"hljs-type\">int</span> ZEXPORT <span class=\"hljs-title\">deflate</span><span class=\"hljs-params\">(z_streamp strm, <span class=\"hljs-type\">int</span> flush)</span></span>;<br></code></pre></td></tr></table></figure>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"C-使用zlib库来压缩文件\"><a href=\"#C-使用zlib库来压缩文件\" class=\"headerlink\" title=\"C++使用zlib库来压缩文件\"></a>C++使用zlib库来压缩文件</h2><p>zlib压缩库提供内存压缩和解压缩功能，包括对未压缩的完整性检查数据，提供支持的压缩方法为：deflation，默认使用压缩数据格式为zlib格式。</p>\n<p>zlib库支持读取和写入gzip(.gz)格式的文件，zlib格式旨在紧凑且快速，可用于内存和通信渠道。gzip格式设计用于文件系统上的单文件压缩，比zlib具有更大的头部以维护目录信息，并且使用与zlib不同且更慢的检查方法。</p>\n<p>该库不安装任何信号处理程序。解码器检查压缩数据的一致性，因此即使在输入损坏的情况下，库也不应崩溃。</p>\n<h3 id=\"数据流结构\"><a href=\"#数据流结构\" class=\"headerlink\" title=\"数据流结构\"></a>数据流结构</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-built_in\">void</span>pf (*alloc_func)(<span class=\"hljs-built_in\">void</span>pf opaque, uInt items, uInt size);<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-built_in\">void</span>   (*free_func)(<span class=\"hljs-built_in\">void</span>pf opaque, <span class=\"hljs-built_in\">void</span>pf address);<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>typedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size);</code>这个函数指针通常用于内存分配，允许用户自定义的内存分配函数</li>\n<li><code>typedef void   (*free_func)(voidpf opaque, voidpf address);</code>这个函数指针通常用于内存释放，允许用户自定义的内存释放函数</li>\n</ul>\n<h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\">ZEXTERN <span class=\"hljs-type\">int</span> ZEXPORT <span class=\"hljs-title\">deflateInit</span><span class=\"hljs-params\">(z_streamp strm, <span class=\"hljs-type\">int</span> level)</span></span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>level</code>表示压缩级别，要么为<code>Z_DEFAULT_COMPRESSION</code>，要么介于0-9之间，1表示最佳速度，9表示最佳压缩，0表示没有压缩，<code>Z_DEFAULT_COMPRESSION</code>默认在6级别。</li>\n<li><code>deflateInit</code> 返回 <code>Z_OK</code> 如果成功，则返回 <code>Z_MEM_ERROR</code> 如果没有 足够的内存，<code>Z_STREAM_ERROR</code> <code>level</code> 不是有效的压缩级别，<code>Z_VERSION_ERROR</code> <em>zlib</em> 库版本 （<code>zlib_version</code>） 不兼容 替换为调用方 （<code>ZLIB_VERSION</code>） 假定的版本。如果没有错误消息，<code>则 msg</code> 设置为 null。<code>deflateInit</code> 不 执行任何压缩：这将由 <code>deflate（）</code> 完成。</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\">ZEXTERN <span class=\"hljs-type\">int</span> ZEXPORT <span class=\"hljs-title\">deflate</span><span class=\"hljs-params\">(z_streamp strm, <span class=\"hljs-type\">int</span> flush)</span></span>;<br></code></pre></td></tr></table></figure>\n"},{"title":"Git常见用法","date":"2024-01-04T13:36:55.903Z","top_img":"2024/01/04/index/image-20231204110955462.png","_content":"\n#### 怎样撤销一个已经push到远端的版本\n\n```\n每次push之前线pull一下\n\n1、查看当前提交的信息，找到需要撤回到的版本号复制，一串十六进制的数\ngit log\n\n2、使用git reset\ngit reset --soft 复制的版本号\n\n3、强制回退当前版本号\n// 确认一下当前版本\ngit log\n// 谨慎使用，强制使用本地仓库代码修改远程仓库\ngit push orgin master --force\n```\n\n#### 新建分支并同步到远端的分支\n\n```\n# 在本地新建一个名字为branch_name的分支，并与远端的origin/branch_name同步\ngit checkout -b branch_name origin/branch_name\n```\n\n#### 解决git clone超时的问题\n\n从github上clone代码仓库报错`Failed to connect to github.com port 443 after 21038 ms: Couldn't connect to server`且尝试去ping一下github官网会丢包\n\n![image-20231204110955462](git/image-20231204110955462.png)\n\n解决方案\n\n修改系统的hosts，跳过域名解析的过程，直接用ip地址访问\n\n```\n192.30.255.112 github.com git\n185.31.16.184 github.global.ssl.fastly.net\n```\n\n![image-20231204111125551](git/image-20231204111125551.png)\n\n修改hosts需要给文件更高的权限\n\n![image-20231204111350240](git/image-20231204111350240.png)\n\n#### github中git push出现超时的问题\n\n![image-20231204112945547](git/image-20231204112945547.png)\n\n解决方案\n\n1、打开本机的代理服务器\n\n![image-20231204113100512](git/image-20231204113100512.png)\n\n2、取消git config里面的http和https代理\n\n![image-20231204113208566](git/image-20231204113208566.png)\n\n3、设置http代理服务器\n\n![image-20231204113304822](git/image-20231204113304822.png)\n\n#### linux中输出一个文件夹下面的所有文件名\n\n- **`/path/to/directory`**: 替换为目标目录的路径。\n- **`-maxdepth 1`**: 限制`find`的搜索深度为1，即仅在指定的目录中搜索，而不会搜索其子目录。\n- **`-type f`**: 限制搜索结果为普通文件（不包括目录和其他类型的文件）。\n- **`-exec basename {} \\;`**: 对每一个找到的文件执行`basename`命令，即输出文件的基本名称。`{}`是`find`命令的占位符，表示每个找到的文件的路径。`\\;`表示命令结束。\n\n```\nfind /path/to/directory -maxdepth 1 -type f -exec basename {} \\;\n```\n\n#### git查看远端仓库地址\n\n```\ngit remote -v\n\n# 更改远程仓库\ngit remote set-url origin 仓库地址\n```\n\n#### 查看代码贡献量\n\n> 按照各个作者的修改代码总数排序\n\n```\ngit log --pretty=\"%aN\" | sort | uniq -c | while read count author; do echo -n \"$author \"; git log --author=\"$author\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2 } END { total = add + subs; printf \"%d\\n\", total }'; done | sort -rnk2\n```\n\n","source":"_posts/git.md","raw":"---\ntitle: Git常见用法\ndate: 2024年1月4日\ntags: git\ncategories: 技术研究\ntop_img: image-20231204110955462.png\n---\n\n#### 怎样撤销一个已经push到远端的版本\n\n```\n每次push之前线pull一下\n\n1、查看当前提交的信息，找到需要撤回到的版本号复制，一串十六进制的数\ngit log\n\n2、使用git reset\ngit reset --soft 复制的版本号\n\n3、强制回退当前版本号\n// 确认一下当前版本\ngit log\n// 谨慎使用，强制使用本地仓库代码修改远程仓库\ngit push orgin master --force\n```\n\n#### 新建分支并同步到远端的分支\n\n```\n# 在本地新建一个名字为branch_name的分支，并与远端的origin/branch_name同步\ngit checkout -b branch_name origin/branch_name\n```\n\n#### 解决git clone超时的问题\n\n从github上clone代码仓库报错`Failed to connect to github.com port 443 after 21038 ms: Couldn't connect to server`且尝试去ping一下github官网会丢包\n\n![image-20231204110955462](git/image-20231204110955462.png)\n\n解决方案\n\n修改系统的hosts，跳过域名解析的过程，直接用ip地址访问\n\n```\n192.30.255.112 github.com git\n185.31.16.184 github.global.ssl.fastly.net\n```\n\n![image-20231204111125551](git/image-20231204111125551.png)\n\n修改hosts需要给文件更高的权限\n\n![image-20231204111350240](git/image-20231204111350240.png)\n\n#### github中git push出现超时的问题\n\n![image-20231204112945547](git/image-20231204112945547.png)\n\n解决方案\n\n1、打开本机的代理服务器\n\n![image-20231204113100512](git/image-20231204113100512.png)\n\n2、取消git config里面的http和https代理\n\n![image-20231204113208566](git/image-20231204113208566.png)\n\n3、设置http代理服务器\n\n![image-20231204113304822](git/image-20231204113304822.png)\n\n#### linux中输出一个文件夹下面的所有文件名\n\n- **`/path/to/directory`**: 替换为目标目录的路径。\n- **`-maxdepth 1`**: 限制`find`的搜索深度为1，即仅在指定的目录中搜索，而不会搜索其子目录。\n- **`-type f`**: 限制搜索结果为普通文件（不包括目录和其他类型的文件）。\n- **`-exec basename {} \\;`**: 对每一个找到的文件执行`basename`命令，即输出文件的基本名称。`{}`是`find`命令的占位符，表示每个找到的文件的路径。`\\;`表示命令结束。\n\n```\nfind /path/to/directory -maxdepth 1 -type f -exec basename {} \\;\n```\n\n#### git查看远端仓库地址\n\n```\ngit remote -v\n\n# 更改远程仓库\ngit remote set-url origin 仓库地址\n```\n\n#### 查看代码贡献量\n\n> 按照各个作者的修改代码总数排序\n\n```\ngit log --pretty=\"%aN\" | sort | uniq -c | while read count author; do echo -n \"$author \"; git log --author=\"$author\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2 } END { total = add + subs; printf \"%d\\n\", total }'; done | sort -rnk2\n```\n\n","slug":"git","published":1,"updated":"2024-02-09T05:20:37.141Z","comments":1,"layout":"post","photos":[],"_id":"clseauyn40006ngdf7ymkh0h6","content":"<h4 id=\"怎样撤销一个已经push到远端的版本\"><a href=\"#怎样撤销一个已经push到远端的版本\" class=\"headerlink\" title=\"怎样撤销一个已经push到远端的版本\"></a>怎样撤销一个已经push到远端的版本</h4><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">每次<span class=\"hljs-built_in\">push</span>之前线pull一下<br><br><span class=\"hljs-number\">1</span>、查看当前提交的信息，找到需要撤回到的版本号复制，一串十六进制的数<br>git <span class=\"hljs-built_in\">log</span><br><br><span class=\"hljs-number\">2</span>、使用git reset<br>git reset --soft 复制的版本号<br><br><span class=\"hljs-number\">3</span>、强制回退当前版本号<br><span class=\"hljs-comment\">// 确认一下当前版本</span><br>git <span class=\"hljs-built_in\">log</span><br><span class=\"hljs-comment\">// 谨慎使用，强制使用本地仓库代码修改远程仓库</span><br>git <span class=\"hljs-built_in\">push</span> orgin master --force<br></code></pre></td></tr></table></figure>\n<h4 id=\"新建分支并同步到远端的分支\"><a href=\"#新建分支并同步到远端的分支\" class=\"headerlink\" title=\"新建分支并同步到远端的分支\"></a>新建分支并同步到远端的分支</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-comment\"># 在本地新建一个名字为branch_name的分支，并与远端的origin/branch_name同步</span><br>git checkout -<span class=\"hljs-keyword\">b </span><span class=\"hljs-keyword\">branch_name </span><span class=\"hljs-keyword\">origin/branch_name</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"解决git-clone超时的问题\"><a href=\"#解决git-clone超时的问题\" class=\"headerlink\" title=\"解决git clone超时的问题\"></a>解决git clone超时的问题</h4><p>从github上clone代码仓库报错<code>Failed to connect to github.com port 443 after 21038 ms: Couldn&#39;t connect to server</code>且尝试去ping一下github官网会丢包</p>\n<img src=\"/2024/01/04/index/image-20231204110955462.png\" class=\"\" title=\"image-20231204110955462\">\n<p>解决方案</p>\n<p>修改系统的hosts，跳过域名解析的过程，直接用ip地址访问</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs accesslog\"><span class=\"hljs-number\">192.30.255.112</span> github.com git<br><span class=\"hljs-number\">185.31.16.184</span> github.global.ssl.fastly.net<br></code></pre></td></tr></table></figure>\n<img src=\"/2024/01/04/index/image-20231204111125551.png\" class=\"\" title=\"image-20231204111125551\">\n<p>修改hosts需要给文件更高的权限</p>\n<img src=\"/2024/01/04/index/image-20231204111350240.png\" class=\"\" title=\"image-20231204111350240\">\n<h4 id=\"github中git-push出现超时的问题\"><a href=\"#github中git-push出现超时的问题\" class=\"headerlink\" title=\"github中git push出现超时的问题\"></a>github中git push出现超时的问题</h4><img src=\"/2024/01/04/index/image-20231204112945547.png\" class=\"\" title=\"image-20231204112945547\">\n<p>解决方案</p>\n<p>1、打开本机的代理服务器</p>\n<img src=\"/2024/01/04/index/image-20231204113100512.png\" class=\"\" title=\"image-20231204113100512\">\n<p>2、取消git config里面的http和https代理</p>\n<img src=\"/2024/01/04/index/image-20231204113208566.png\" class=\"\" title=\"image-20231204113208566\">\n<p>3、设置http代理服务器</p>\n<img src=\"/2024/01/04/index/image-20231204113304822.png\" class=\"\" title=\"image-20231204113304822\">\n<h4 id=\"linux中输出一个文件夹下面的所有文件名\"><a href=\"#linux中输出一个文件夹下面的所有文件名\" class=\"headerlink\" title=\"linux中输出一个文件夹下面的所有文件名\"></a>linux中输出一个文件夹下面的所有文件名</h4><ul>\n<li><strong><code>/path/to/directory</code></strong>: 替换为目标目录的路径。</li>\n<li><strong><code>-maxdepth 1</code></strong>: 限制<code>find</code>的搜索深度为1，即仅在指定的目录中搜索，而不会搜索其子目录。</li>\n<li><strong><code>-type f</code></strong>: 限制搜索结果为普通文件（不包括目录和其他类型的文件）。</li>\n<li><strong><code>-exec basename &#123;&#125; \\;</code></strong>: 对每一个找到的文件执行<code>basename</code>命令，即输出文件的基本名称。<code>&#123;&#125;</code>是<code>find</code>命令的占位符，表示每个找到的文件的路径。<code>\\;</code>表示命令结束。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">find /path/to/directory -maxdepth 1 -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">exec</span> <span class=\"hljs-built_in\">basename</span> &#123;&#125; \\;<br></code></pre></td></tr></table></figure>\n<h4 id=\"git查看远端仓库地址\"><a href=\"#git查看远端仓库地址\" class=\"headerlink\" title=\"git查看远端仓库地址\"></a>git查看远端仓库地址</h4><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> -<span class=\"hljs-string\">v</span><br><br><span class=\"hljs-comment\"># 更改远程仓库</span><br><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-string\">origin</span> 仓库地址<br></code></pre></td></tr></table></figure>\n<h4 id=\"查看代码贡献量\"><a href=\"#查看代码贡献量\" class=\"headerlink\" title=\"查看代码贡献量\"></a>查看代码贡献量</h4><blockquote>\n<p>按照各个作者的修改代码总数排序</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">log</span> --pretty=<span class=\"hljs-string\">&quot;%aN&quot;</span> | <span class=\"hljs-built_in\">sort</span> | <span class=\"hljs-built_in\">uniq</span> -c | <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> count author; <span class=\"hljs-keyword\">do</span> <span class=\"hljs-built_in\">echo</span> -n <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$author</span> &quot;</span>; git <span class=\"hljs-built_in\">log</span> --author=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$author</span>&quot;</span> --pretty=tformat: --numstat | awk <span class=\"hljs-string\">&#x27;&#123; add += $1; subs += $2 &#125; END &#123; total = add + subs; printf &quot;%d\\n&quot;, total &#125;&#x27;</span>; <span class=\"hljs-keyword\">done</span> | <span class=\"hljs-built_in\">sort</span> -rnk2<br></code></pre></td></tr></table></figure>\n","cover":"/img/default_cover03.jpg","cover_type":"img","excerpt":"","more":"<h4 id=\"怎样撤销一个已经push到远端的版本\"><a href=\"#怎样撤销一个已经push到远端的版本\" class=\"headerlink\" title=\"怎样撤销一个已经push到远端的版本\"></a>怎样撤销一个已经push到远端的版本</h4><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">每次<span class=\"hljs-built_in\">push</span>之前线pull一下<br><br><span class=\"hljs-number\">1</span>、查看当前提交的信息，找到需要撤回到的版本号复制，一串十六进制的数<br>git <span class=\"hljs-built_in\">log</span><br><br><span class=\"hljs-number\">2</span>、使用git reset<br>git reset --soft 复制的版本号<br><br><span class=\"hljs-number\">3</span>、强制回退当前版本号<br><span class=\"hljs-comment\">// 确认一下当前版本</span><br>git <span class=\"hljs-built_in\">log</span><br><span class=\"hljs-comment\">// 谨慎使用，强制使用本地仓库代码修改远程仓库</span><br>git <span class=\"hljs-built_in\">push</span> orgin master --force<br></code></pre></td></tr></table></figure>\n<h4 id=\"新建分支并同步到远端的分支\"><a href=\"#新建分支并同步到远端的分支\" class=\"headerlink\" title=\"新建分支并同步到远端的分支\"></a>新建分支并同步到远端的分支</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-comment\"># 在本地新建一个名字为branch_name的分支，并与远端的origin/branch_name同步</span><br>git checkout -<span class=\"hljs-keyword\">b </span><span class=\"hljs-keyword\">branch_name </span><span class=\"hljs-keyword\">origin/branch_name</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"解决git-clone超时的问题\"><a href=\"#解决git-clone超时的问题\" class=\"headerlink\" title=\"解决git clone超时的问题\"></a>解决git clone超时的问题</h4><p>从github上clone代码仓库报错<code>Failed to connect to github.com port 443 after 21038 ms: Couldn&#39;t connect to server</code>且尝试去ping一下github官网会丢包</p>\n<img src=\"/2024/01/04/index/image-20231204110955462.png\" class=\"\" title=\"image-20231204110955462\">\n<p>解决方案</p>\n<p>修改系统的hosts，跳过域名解析的过程，直接用ip地址访问</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs accesslog\"><span class=\"hljs-number\">192.30.255.112</span> github.com git<br><span class=\"hljs-number\">185.31.16.184</span> github.global.ssl.fastly.net<br></code></pre></td></tr></table></figure>\n<img src=\"/2024/01/04/index/image-20231204111125551.png\" class=\"\" title=\"image-20231204111125551\">\n<p>修改hosts需要给文件更高的权限</p>\n<img src=\"/2024/01/04/index/image-20231204111350240.png\" class=\"\" title=\"image-20231204111350240\">\n<h4 id=\"github中git-push出现超时的问题\"><a href=\"#github中git-push出现超时的问题\" class=\"headerlink\" title=\"github中git push出现超时的问题\"></a>github中git push出现超时的问题</h4><img src=\"/2024/01/04/index/image-20231204112945547.png\" class=\"\" title=\"image-20231204112945547\">\n<p>解决方案</p>\n<p>1、打开本机的代理服务器</p>\n<img src=\"/2024/01/04/index/image-20231204113100512.png\" class=\"\" title=\"image-20231204113100512\">\n<p>2、取消git config里面的http和https代理</p>\n<img src=\"/2024/01/04/index/image-20231204113208566.png\" class=\"\" title=\"image-20231204113208566\">\n<p>3、设置http代理服务器</p>\n<img src=\"/2024/01/04/index/image-20231204113304822.png\" class=\"\" title=\"image-20231204113304822\">\n<h4 id=\"linux中输出一个文件夹下面的所有文件名\"><a href=\"#linux中输出一个文件夹下面的所有文件名\" class=\"headerlink\" title=\"linux中输出一个文件夹下面的所有文件名\"></a>linux中输出一个文件夹下面的所有文件名</h4><ul>\n<li><strong><code>/path/to/directory</code></strong>: 替换为目标目录的路径。</li>\n<li><strong><code>-maxdepth 1</code></strong>: 限制<code>find</code>的搜索深度为1，即仅在指定的目录中搜索，而不会搜索其子目录。</li>\n<li><strong><code>-type f</code></strong>: 限制搜索结果为普通文件（不包括目录和其他类型的文件）。</li>\n<li><strong><code>-exec basename &#123;&#125; \\;</code></strong>: 对每一个找到的文件执行<code>basename</code>命令，即输出文件的基本名称。<code>&#123;&#125;</code>是<code>find</code>命令的占位符，表示每个找到的文件的路径。<code>\\;</code>表示命令结束。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">find /path/to/directory -maxdepth 1 -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">exec</span> <span class=\"hljs-built_in\">basename</span> &#123;&#125; \\;<br></code></pre></td></tr></table></figure>\n<h4 id=\"git查看远端仓库地址\"><a href=\"#git查看远端仓库地址\" class=\"headerlink\" title=\"git查看远端仓库地址\"></a>git查看远端仓库地址</h4><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> -<span class=\"hljs-string\">v</span><br><br><span class=\"hljs-comment\"># 更改远程仓库</span><br><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">remote</span> <span class=\"hljs-built_in\">set-url</span> <span class=\"hljs-string\">origin</span> 仓库地址<br></code></pre></td></tr></table></figure>\n<h4 id=\"查看代码贡献量\"><a href=\"#查看代码贡献量\" class=\"headerlink\" title=\"查看代码贡献量\"></a>查看代码贡献量</h4><blockquote>\n<p>按照各个作者的修改代码总数排序</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">log</span> --pretty=<span class=\"hljs-string\">&quot;%aN&quot;</span> | <span class=\"hljs-built_in\">sort</span> | <span class=\"hljs-built_in\">uniq</span> -c | <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> count author; <span class=\"hljs-keyword\">do</span> <span class=\"hljs-built_in\">echo</span> -n <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$author</span> &quot;</span>; git <span class=\"hljs-built_in\">log</span> --author=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$author</span>&quot;</span> --pretty=tformat: --numstat | awk <span class=\"hljs-string\">&#x27;&#123; add += $1; subs += $2 &#125; END &#123; total = add + subs; printf &quot;%d\\n&quot;, total &#125;&#x27;</span>; <span class=\"hljs-keyword\">done</span> | <span class=\"hljs-built_in\">sort</span> -rnk2<br></code></pre></td></tr></table></figure>\n"},{"title":"平方根倒数算法","date":"2024-01-24T11:53:09.000Z","top_img":"2024/01/24/index/WTF.png","mathjax":true,"_content":"\n### 平方根倒数算法\n\n$$\n1/\\sqrt{x}\n$$\n\n#### 求一个数的平方根倒数\n\n对于计算机来说求一个数的平方根一般有两种方式，二分法和牛顿迭代法\n\n* 二分法\n\n  EXP表示精度，从0-num不断开始计算mid的平方，直到left>right，此时返回right的值即为所求的平方根，其中注意边界条件：\n\n  当mid * mid = num时，此时left需要加上EXP，往后的循环中mid * mid 都会大于num，所以right还会不停减小，直到right < left，返回right，这时right已经在精度范围内\n\n```c++\ndouble Sqrt(double num) {\n    double left = 0, right = num;\n \n    while (left <= right) {\n        double mid = left + (right - left) / 2;\n \n        if (mid * mid <= num)\n            left = mid + EXP;\n        else\n            right = mid - EXP;\n    }   \n \n    return right;\n}\n```\n\n* 牛顿迭代法\n\n  牛顿迭代法是将原来的求开方问题转化为数学函数问题，即假设`x * x = n`，求n的开方转化为`x * x - n = 0`的解，即`y = x * x - n`与x轴的交点\n\n  代码中last表示上一次的切线与x轴的交点的x坐标，初始值为num，ret表示x = last时的切线与x轴的交点，不断迭代，直到ret - last小于精度，即达到精度返回ret。\n\n```c++\ndouble Sqrt(double num) {\n    if (0 == num)\n        return num;\n \n    double last = num, ret = num;\n \n    for (;;) {\n        last = 0.5 * (ret + num / ret);\n        if (fabs(ret - last) < EXP)\n            break;\n        ret = last;\n    }   \n \n    return ret;\n}\n```\n\n计算完平方根过后，再计算其倒数，也是一个对计算机来说并不是很友好的运算\n\n#### 快速平方根倒数计算推导\n\n快速平方根算法是利用了计算机存储浮点数的特性并和牛顿迭代法来共同完成的，也是一个近似计算。对于牛顿迭代法，其精髓是如果能够找到一个接近于解的初始值，是有可能通过一次迭代或者较少次数的迭代达到比较高的近似解，而快速平方根算法旨在于找到一个较为近似的初始值。具体的运算如下。\n\n**笔记中有一处笔误0xD5F400000应改成0x5F400000**\n\n![运算过程](平方根倒数算法/运算过程.png)\n\n快速平方根算法代码\n\n* 初始值由0x5F400000改为了0x5f3759df，对于X/2代码中使用了位运算加速求解\n\n```C++\nfloat Q_rsqrt(float number)\n{\n    long i;\n    float x2, y;\n    const float threehalfs = 1.5F;\n    x2 = number * 0.5F;\n    y = number;\n    i = * ( long* ) &y;\t\t\t\t\t\t\t// evil floating point bit hack\n    i = 0x5f3759df - (i >> 1);\t\t\t\t\t// what the fuck? \n    y = * ( float * ) &i;\n    y = y * (threehalfs - ( x2 * y * y ) );\t\t// 1st iteration\n//  y = y * (threehalfs - ( x2 * y * y ) );\t\t// 2st iteration, can be removed\n    \n    return y;\n}\n```","source":"_posts/平方根倒数算法.md","raw":"---\ntitle: 平方根倒数算法\ndate: 2024-01-24 19:53:09\ntags: [数学, 算法]\ncategories: 技术研究\ntop_img: WTF.png\nmathjax: true\n---\n\n### 平方根倒数算法\n\n$$\n1/\\sqrt{x}\n$$\n\n#### 求一个数的平方根倒数\n\n对于计算机来说求一个数的平方根一般有两种方式，二分法和牛顿迭代法\n\n* 二分法\n\n  EXP表示精度，从0-num不断开始计算mid的平方，直到left>right，此时返回right的值即为所求的平方根，其中注意边界条件：\n\n  当mid * mid = num时，此时left需要加上EXP，往后的循环中mid * mid 都会大于num，所以right还会不停减小，直到right < left，返回right，这时right已经在精度范围内\n\n```c++\ndouble Sqrt(double num) {\n    double left = 0, right = num;\n \n    while (left <= right) {\n        double mid = left + (right - left) / 2;\n \n        if (mid * mid <= num)\n            left = mid + EXP;\n        else\n            right = mid - EXP;\n    }   \n \n    return right;\n}\n```\n\n* 牛顿迭代法\n\n  牛顿迭代法是将原来的求开方问题转化为数学函数问题，即假设`x * x = n`，求n的开方转化为`x * x - n = 0`的解，即`y = x * x - n`与x轴的交点\n\n  代码中last表示上一次的切线与x轴的交点的x坐标，初始值为num，ret表示x = last时的切线与x轴的交点，不断迭代，直到ret - last小于精度，即达到精度返回ret。\n\n```c++\ndouble Sqrt(double num) {\n    if (0 == num)\n        return num;\n \n    double last = num, ret = num;\n \n    for (;;) {\n        last = 0.5 * (ret + num / ret);\n        if (fabs(ret - last) < EXP)\n            break;\n        ret = last;\n    }   \n \n    return ret;\n}\n```\n\n计算完平方根过后，再计算其倒数，也是一个对计算机来说并不是很友好的运算\n\n#### 快速平方根倒数计算推导\n\n快速平方根算法是利用了计算机存储浮点数的特性并和牛顿迭代法来共同完成的，也是一个近似计算。对于牛顿迭代法，其精髓是如果能够找到一个接近于解的初始值，是有可能通过一次迭代或者较少次数的迭代达到比较高的近似解，而快速平方根算法旨在于找到一个较为近似的初始值。具体的运算如下。\n\n**笔记中有一处笔误0xD5F400000应改成0x5F400000**\n\n![运算过程](平方根倒数算法/运算过程.png)\n\n快速平方根算法代码\n\n* 初始值由0x5F400000改为了0x5f3759df，对于X/2代码中使用了位运算加速求解\n\n```C++\nfloat Q_rsqrt(float number)\n{\n    long i;\n    float x2, y;\n    const float threehalfs = 1.5F;\n    x2 = number * 0.5F;\n    y = number;\n    i = * ( long* ) &y;\t\t\t\t\t\t\t// evil floating point bit hack\n    i = 0x5f3759df - (i >> 1);\t\t\t\t\t// what the fuck? \n    y = * ( float * ) &i;\n    y = y * (threehalfs - ( x2 * y * y ) );\t\t// 1st iteration\n//  y = y * (threehalfs - ( x2 * y * y ) );\t\t// 2st iteration, can be removed\n    \n    return y;\n}\n```","slug":"平方根倒数算法","published":1,"updated":"2024-02-09T05:20:17.041Z","comments":1,"layout":"post","photos":[],"_id":"clseauyn50007ngdfftfc1axs","content":"<h3 id=\"平方根倒数算法\"><a href=\"#平方根倒数算法\" class=\"headerlink\" title=\"平方根倒数算法\"></a>平方根倒数算法</h3><script type=\"math/tex; mode=display\">\n1/\\sqrt{x}</script><h4 id=\"求一个数的平方根倒数\"><a href=\"#求一个数的平方根倒数\" class=\"headerlink\" title=\"求一个数的平方根倒数\"></a>求一个数的平方根倒数</h4><p>对于计算机来说求一个数的平方根一般有两种方式，二分法和牛顿迭代法</p>\n<ul>\n<li><p>二分法</p>\n<p>EXP表示精度，从0-num不断开始计算mid的平方，直到left&gt;right，此时返回right的值即为所求的平方根，其中注意边界条件：</p>\n<p>当mid <em> mid = num时，此时left需要加上EXP，往后的循环中mid </em> mid 都会大于num，所以right还会不停减小，直到right &lt; left，返回right，这时right已经在精度范围内</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">Sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> num)</span> </span>&#123;<br>    <span class=\"hljs-type\">double</span> left = <span class=\"hljs-number\">0</span>, right = num;<br> <br>    <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>        <span class=\"hljs-type\">double</span> mid = left + (right - left) / <span class=\"hljs-number\">2</span>;<br> <br>        <span class=\"hljs-keyword\">if</span> (mid * mid &lt;= num)<br>            left = mid + EXP;<br>        <span class=\"hljs-keyword\">else</span><br>            right = mid - EXP;<br>    &#125;   <br> <br>    <span class=\"hljs-keyword\">return</span> right;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>牛顿迭代法</p>\n<p>牛顿迭代法是将原来的求开方问题转化为数学函数问题，即假设<code>x * x = n</code>，求n的开方转化为<code>x * x - n = 0</code>的解，即<code>y = x * x - n</code>与x轴的交点</p>\n<p>代码中last表示上一次的切线与x轴的交点的x坐标，初始值为num，ret表示x = last时的切线与x轴的交点，不断迭代，直到ret - last小于精度，即达到精度返回ret。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">Sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> num)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> == num)<br>        <span class=\"hljs-keyword\">return</span> num;<br> <br>    <span class=\"hljs-type\">double</span> last = num, ret = num;<br> <br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>        last = <span class=\"hljs-number\">0.5</span> * (ret + num / ret);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">fabs</span>(ret - last) &lt; EXP)<br>            <span class=\"hljs-keyword\">break</span>;<br>        ret = last;<br>    &#125;   <br> <br>    <span class=\"hljs-keyword\">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>计算完平方根过后，再计算其倒数，也是一个对计算机来说并不是很友好的运算</p>\n<h4 id=\"快速平方根倒数计算推导\"><a href=\"#快速平方根倒数计算推导\" class=\"headerlink\" title=\"快速平方根倒数计算推导\"></a>快速平方根倒数计算推导</h4><p>快速平方根算法是利用了计算机存储浮点数的特性并和牛顿迭代法来共同完成的，也是一个近似计算。对于牛顿迭代法，其精髓是如果能够找到一个接近于解的初始值，是有可能通过一次迭代或者较少次数的迭代达到比较高的近似解，而快速平方根算法旨在于找到一个较为近似的初始值。具体的运算如下。</p>\n<p><strong>笔记中有一处笔误0xD5F400000应改成0x5F400000</strong></p>\n<img src=\"/2024/01/24/index/%E8%BF%90%E7%AE%97%E8%BF%87%E7%A8%8B.png\" class=\"\" title=\"运算过程\">\n<p>快速平方根算法代码</p>\n<ul>\n<li>初始值由0x5F400000改为了0x5f3759df，对于X/2代码中使用了位运算加速求解</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">Q_rsqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> number)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">long</span> i;<br>    <span class=\"hljs-type\">float</span> x2, y;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> threehalfs = <span class=\"hljs-number\">1.5F</span>;<br>    x2 = number * <span class=\"hljs-number\">0.5F</span>;<br>    y = number;<br>    i = * ( <span class=\"hljs-type\">long</span>* ) &amp;y;\t\t\t\t\t\t\t<span class=\"hljs-comment\">// evil floating point bit hack</span><br>    i = <span class=\"hljs-number\">0x5f3759df</span> - (i &gt;&gt; <span class=\"hljs-number\">1</span>);\t\t\t\t\t<span class=\"hljs-comment\">// what the fuck? </span><br>    y = * ( <span class=\"hljs-type\">float</span> * ) &amp;i;<br>    y = y * (threehalfs - ( x2 * y * y ) );\t\t<span class=\"hljs-comment\">// 1st iteration</span><br><span class=\"hljs-comment\">//  y = y * (threehalfs - ( x2 * y * y ) );\t\t// 2st iteration, can be removed</span><br>    <br>    <span class=\"hljs-keyword\">return</span> y;<br>&#125;<br></code></pre></td></tr></table></figure>","cover":"/img/default_cover04.jpg","cover_type":"img","excerpt":"","more":"<h3 id=\"平方根倒数算法\"><a href=\"#平方根倒数算法\" class=\"headerlink\" title=\"平方根倒数算法\"></a>平方根倒数算法</h3><script type=\"math/tex; mode=display\">\n1/\\sqrt{x}</script><h4 id=\"求一个数的平方根倒数\"><a href=\"#求一个数的平方根倒数\" class=\"headerlink\" title=\"求一个数的平方根倒数\"></a>求一个数的平方根倒数</h4><p>对于计算机来说求一个数的平方根一般有两种方式，二分法和牛顿迭代法</p>\n<ul>\n<li><p>二分法</p>\n<p>EXP表示精度，从0-num不断开始计算mid的平方，直到left&gt;right，此时返回right的值即为所求的平方根，其中注意边界条件：</p>\n<p>当mid <em> mid = num时，此时left需要加上EXP，往后的循环中mid </em> mid 都会大于num，所以right还会不停减小，直到right &lt; left，返回right，这时right已经在精度范围内</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">Sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> num)</span> </span>&#123;<br>    <span class=\"hljs-type\">double</span> left = <span class=\"hljs-number\">0</span>, right = num;<br> <br>    <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>        <span class=\"hljs-type\">double</span> mid = left + (right - left) / <span class=\"hljs-number\">2</span>;<br> <br>        <span class=\"hljs-keyword\">if</span> (mid * mid &lt;= num)<br>            left = mid + EXP;<br>        <span class=\"hljs-keyword\">else</span><br>            right = mid - EXP;<br>    &#125;   <br> <br>    <span class=\"hljs-keyword\">return</span> right;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>牛顿迭代法</p>\n<p>牛顿迭代法是将原来的求开方问题转化为数学函数问题，即假设<code>x * x = n</code>，求n的开方转化为<code>x * x - n = 0</code>的解，即<code>y = x * x - n</code>与x轴的交点</p>\n<p>代码中last表示上一次的切线与x轴的交点的x坐标，初始值为num，ret表示x = last时的切线与x轴的交点，不断迭代，直到ret - last小于精度，即达到精度返回ret。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">Sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> num)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> == num)<br>        <span class=\"hljs-keyword\">return</span> num;<br> <br>    <span class=\"hljs-type\">double</span> last = num, ret = num;<br> <br>    <span class=\"hljs-keyword\">for</span> (;;) &#123;<br>        last = <span class=\"hljs-number\">0.5</span> * (ret + num / ret);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">fabs</span>(ret - last) &lt; EXP)<br>            <span class=\"hljs-keyword\">break</span>;<br>        ret = last;<br>    &#125;   <br> <br>    <span class=\"hljs-keyword\">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>计算完平方根过后，再计算其倒数，也是一个对计算机来说并不是很友好的运算</p>\n<h4 id=\"快速平方根倒数计算推导\"><a href=\"#快速平方根倒数计算推导\" class=\"headerlink\" title=\"快速平方根倒数计算推导\"></a>快速平方根倒数计算推导</h4><p>快速平方根算法是利用了计算机存储浮点数的特性并和牛顿迭代法来共同完成的，也是一个近似计算。对于牛顿迭代法，其精髓是如果能够找到一个接近于解的初始值，是有可能通过一次迭代或者较少次数的迭代达到比较高的近似解，而快速平方根算法旨在于找到一个较为近似的初始值。具体的运算如下。</p>\n<p><strong>笔记中有一处笔误0xD5F400000应改成0x5F400000</strong></p>\n<img src=\"/2024/01/24/index/%E8%BF%90%E7%AE%97%E8%BF%87%E7%A8%8B.png\" class=\"\" title=\"运算过程\">\n<p>快速平方根算法代码</p>\n<ul>\n<li>初始值由0x5F400000改为了0x5f3759df，对于X/2代码中使用了位运算加速求解</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">Q_rsqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> number)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">long</span> i;<br>    <span class=\"hljs-type\">float</span> x2, y;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> threehalfs = <span class=\"hljs-number\">1.5F</span>;<br>    x2 = number * <span class=\"hljs-number\">0.5F</span>;<br>    y = number;<br>    i = * ( <span class=\"hljs-type\">long</span>* ) &amp;y;\t\t\t\t\t\t\t<span class=\"hljs-comment\">// evil floating point bit hack</span><br>    i = <span class=\"hljs-number\">0x5f3759df</span> - (i &gt;&gt; <span class=\"hljs-number\">1</span>);\t\t\t\t\t<span class=\"hljs-comment\">// what the fuck? </span><br>    y = * ( <span class=\"hljs-type\">float</span> * ) &amp;i;<br>    y = y * (threehalfs - ( x2 * y * y ) );\t\t<span class=\"hljs-comment\">// 1st iteration</span><br><span class=\"hljs-comment\">//  y = y * (threehalfs - ( x2 * y * y ) );\t\t// 2st iteration, can be removed</span><br>    <br>    <span class=\"hljs-keyword\">return</span> y;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"进程间的通信方式","date":"2024-01-30T03:27:05.000Z","cover":"/img/default_cover02.jpg","top_img":null,"_content":"\n## 进程间的通信方式\n\n每个进程的用户地址空间是独立的，一般情况之下，不同的进程是**无法**通过进程间各自的地址空间来进行互相访问，但是不同的进程所拥有的内核空间是共享的，因此如果不同进程之间需要进行通信必须要通过内核。\n\n### 管道通信\n\n管道通信分为匿名管道和命名管道，通过名字可以区分，匿名管道是无法获取和控制的管道，命名管道是通过用户可以自己建立的管道。\n\n管道智能进行半双工的通信，即数据传输是单向的，如果想要实现互相通信，就需要创建两个管道。\n\n#### 匿名管道\n\n* 在linux中的`|`竖线就是一个管道，将管道符前的操作的输出作为管道符后的操作的输入\n\n一个匿名管道的创建会使用到下面的系统调用\n\n```C++\nint pipe(int fd[2]);\n```\n\n表示创建了一个匿名管道并返回了两个文件描述符，一个是管道读取端的描述符`fd[0]`，另一个是管道写入端的描述符`fd[1]`，**匿名管道是特殊的文件，只存在于内存当中，不存在于文件系统中**\n\n管道实际上就是内核中的一串缓存，进程通过文件描述符来对这一串缓存进行读写操作\n\n![image-20240130223824673](进程间的通信方式/image-20240130223824673.png)\n\n**如果说需要实现多个进程之间的通信**，可以使用`fork`操作来创建子进程，创建子进程时，子进程会同时复制父进程的文件描述符，两个进程便可以通过各自的文件描述符来进行跨进程之间的通信。\n\n![image-20240130224638178](进程间的通信方式/image-20240130224638178.png)\n\n通过对文件描述符的开放和关闭，可以控制父进程和子进程之间的读写操作。\n\n* 如：父进程关闭读取的 fd[0]，只保留写入的 fd[1]；子进程关闭写入的 fd[1]，只保留读取的 fd[0]；\n* 便可以实现从父进程向子进程的数据写入\n\n实现多个进程之间匿名管道的通信另一种方式就是fork两个子进程，关闭父进程的文件描述符，开启子进程的`fd`，实现子进程之间的通信。\n\n可以看出来，匿名管道的通信范围仅限于父子关系的进程。因为管道没有实体，没有管道文件，只能通过复制父进程的fd来使用文件描述符。\n\n#### 命名管道\n\n* 在linux中可以通过`mkfifo`命令来创建并指定管道名字\n\n```\nmkfifo myPipe\n```\n\n因为命名管道，提前创建了一个类型为管道的设备文件，在进程中只要使用到这个设备，便可以互相通信。\n\n**管道的通信方式，效率较低，不适合进程间的频繁交换数据**\n\n### 消息队列\n\n> 在管道通信的缺点下，消息队列可以解决进程间频繁交换数据的问题。\n\n消息队列是保护在内核中的消息列表，如果进程之间需要进行通信，只需要将消息放在对应的消息队列中便可以正常返回，无需阻塞等待，等到另一个进程需要的时候去消息队列中去读取便可以。\n\n如果消息队列没有释放或者没有关闭操作系统，消息队列会一直存在，而匿名管道则是随着进程的生命周期的结束而销毁。\n\n* 优点\n\n  * 解决频繁交换数据的问题\n\n    两个进程之间就像发邮件一样可以你来我往进行沟通\n\n  * 进程发送消息后无需阻塞等待消息的接收\n\n* 缺点\n\n  * 不适合比较大的数据传输\n\n    消息队列中的消息体是由结构化的数据结构来组织的，有最大长度的限制。\n\n  * 消息队列的通信过程中，存在用户态与内核态之间的数据拷贝开销\n\n### 共享内存\n\n共享内存用到的是现代操作系统中的内存管理的**虚拟内存技术**，每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。\n\n**共享内存的机制：拿出一块虚拟地址空间，映射到相同的物理内存中。**不同的进程可以使用各自的虚拟地址访问到这一片相同的物理内存。\n\n![image-20240130232827259](进程间的通信方式/image-20240130232827259.png)\n\n* 优点\n  * 解决了消息队列中不适合大的数据的通信\n  * 不同进程之间无需进行频繁的用户态和内核态的转换，因为进程都是在自己的用户地址空间中来进行操作\n\n* 缺点\n\n  * 对共享内存的读写问题\n\n    因为共享内存存储的信息一旦发生改变对于不同的进程都是可见的，所以会涉及到读写一致性的问题\n\n  * 共享内存也变为了临界资源，存在进程进程之间的竞争\n\n    需要保护机制，使得共享资源在任意时刻只能被一个进程访问。\n\n### 信号量\n\n> 信号量可以提供对临界资源的保护\n\n信号量是一个整型的计数器，可以用于实现进程间的互斥以及同步，不是用于缓存进程间通信的数据。\n\n信号量的大小表示为资源的数量，对信号量的操作方式有两种原子操作\n\n* 一个是 **P 操作**，这个操作会把信号量减去 1，相减后如果信号量 < 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 >= 0，则表明还有资源可使用，进程可正常继续执行。\n* 一个是 **V 操作**，这个操作会把信号量加上 1，相加后如果信号量 <= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 > 0，则表明当前没有阻塞中的进程；\n\n通过PV操作可以控制进程对资源的互斥访问以及控制进程的同步顺序，**涉及到操作系统的知识**\n\n### 信号\n\n> 在进程工作异常情况下，需要通过信号来通知进程\n\n信号是进程间通信机制中的唯一的异步通信方式，因为可以在任何时候发送信号到某一进程，一旦有信号产生，用户就可以进行对信号处理。\n\n* 信号的处理方式\n  * 执行默认操作： 例如linux中的SIGTERM 信号，就是终止进程的意思\n  * 捕捉信号：可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数\n  * 忽略信号：当不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。\n\n* `SIGKILL` 和 `SEGSTOP`无法被捕捉和忽略。\n\n### Socket\n\nSocket通信实现的是在不同主机之间的通信，分为两种常见的通信方式，一个是基于 TCP 协议的通信方式，一个是基于 UDP 协议的通信方式\n\n> 基于 TCP 协议的通信方式需要客户和服务器之间建立TCP连接，进行三次握手。\n\n![image-20240130234627976](进程间的通信方式/image-20240130234627976.png)\n\n- 服务端和客户端初始化 `socket`，得到文件描述符；\n- 服务端调用 `bind`，将绑定在 IP 地址和端口;\n- 服务端调用 `listen`，进行监听；\n- 服务端调用 `accept`，等待客户端连接；\n- 客户端调用 `connect`，向服务器端的地址和端口发起连接请求；\n- 服务端 `accept` 返回用于传输的 `socket` 的文件描述符；\n- 客户端调用 `write` 写入数据；服务端调用 `read` 读取数据；\n- 客户端断开连接时，会调用 `close`，那么服务端 `read` 读取数据的时候，就会读取到了 `EOF`，待处理完数据后，服务端调用 `close`，表示连接关闭。\n\n这里需要注意的是，服务端调用 `accept` 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。\n\n所以，监听的 socket 和真正用来传送数据的 socket，是「**两个**」 socket，一个叫作**监听 socket**，一个叫作**已完成连接 socket**。\n\n成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。\n\n> 基于UDP的Socket通信\n\n![image-20240130234754230](进程间的通信方式/image-20240130234754230.png)\n\nUDP 是没有连接的，所以不需要三次握手，也就不需要像 TCP 调用 listen 和 connect，但是 UDP 的交互仍然需要 IP 地址和端口号，因此也需要 bind。\n\n对于 UDP 来说，不需要要维护连接，那么也就没有所谓的发送方和接收方，甚至都不存在客户端和服务端的概念，只要有一个 socket 多台机器就可以任意通信，因此每一个 UDP 的 socket 都需要 bind。\n\n另外，每次通信时，调用 sendto 和 recvfrom，都要传入目标主机的 IP 地址和端口。\n","source":"_posts/进程间的通信方式.md","raw":"---\ntitle: 进程间的通信方式\ndate: 2024-01-30 11:27:05\ntags: [操作系统, 进程通信]\ncategories: 技术研究\ncover:\ntop_img:\n---\n\n## 进程间的通信方式\n\n每个进程的用户地址空间是独立的，一般情况之下，不同的进程是**无法**通过进程间各自的地址空间来进行互相访问，但是不同的进程所拥有的内核空间是共享的，因此如果不同进程之间需要进行通信必须要通过内核。\n\n### 管道通信\n\n管道通信分为匿名管道和命名管道，通过名字可以区分，匿名管道是无法获取和控制的管道，命名管道是通过用户可以自己建立的管道。\n\n管道智能进行半双工的通信，即数据传输是单向的，如果想要实现互相通信，就需要创建两个管道。\n\n#### 匿名管道\n\n* 在linux中的`|`竖线就是一个管道，将管道符前的操作的输出作为管道符后的操作的输入\n\n一个匿名管道的创建会使用到下面的系统调用\n\n```C++\nint pipe(int fd[2]);\n```\n\n表示创建了一个匿名管道并返回了两个文件描述符，一个是管道读取端的描述符`fd[0]`，另一个是管道写入端的描述符`fd[1]`，**匿名管道是特殊的文件，只存在于内存当中，不存在于文件系统中**\n\n管道实际上就是内核中的一串缓存，进程通过文件描述符来对这一串缓存进行读写操作\n\n![image-20240130223824673](进程间的通信方式/image-20240130223824673.png)\n\n**如果说需要实现多个进程之间的通信**，可以使用`fork`操作来创建子进程，创建子进程时，子进程会同时复制父进程的文件描述符，两个进程便可以通过各自的文件描述符来进行跨进程之间的通信。\n\n![image-20240130224638178](进程间的通信方式/image-20240130224638178.png)\n\n通过对文件描述符的开放和关闭，可以控制父进程和子进程之间的读写操作。\n\n* 如：父进程关闭读取的 fd[0]，只保留写入的 fd[1]；子进程关闭写入的 fd[1]，只保留读取的 fd[0]；\n* 便可以实现从父进程向子进程的数据写入\n\n实现多个进程之间匿名管道的通信另一种方式就是fork两个子进程，关闭父进程的文件描述符，开启子进程的`fd`，实现子进程之间的通信。\n\n可以看出来，匿名管道的通信范围仅限于父子关系的进程。因为管道没有实体，没有管道文件，只能通过复制父进程的fd来使用文件描述符。\n\n#### 命名管道\n\n* 在linux中可以通过`mkfifo`命令来创建并指定管道名字\n\n```\nmkfifo myPipe\n```\n\n因为命名管道，提前创建了一个类型为管道的设备文件，在进程中只要使用到这个设备，便可以互相通信。\n\n**管道的通信方式，效率较低，不适合进程间的频繁交换数据**\n\n### 消息队列\n\n> 在管道通信的缺点下，消息队列可以解决进程间频繁交换数据的问题。\n\n消息队列是保护在内核中的消息列表，如果进程之间需要进行通信，只需要将消息放在对应的消息队列中便可以正常返回，无需阻塞等待，等到另一个进程需要的时候去消息队列中去读取便可以。\n\n如果消息队列没有释放或者没有关闭操作系统，消息队列会一直存在，而匿名管道则是随着进程的生命周期的结束而销毁。\n\n* 优点\n\n  * 解决频繁交换数据的问题\n\n    两个进程之间就像发邮件一样可以你来我往进行沟通\n\n  * 进程发送消息后无需阻塞等待消息的接收\n\n* 缺点\n\n  * 不适合比较大的数据传输\n\n    消息队列中的消息体是由结构化的数据结构来组织的，有最大长度的限制。\n\n  * 消息队列的通信过程中，存在用户态与内核态之间的数据拷贝开销\n\n### 共享内存\n\n共享内存用到的是现代操作系统中的内存管理的**虚拟内存技术**，每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。\n\n**共享内存的机制：拿出一块虚拟地址空间，映射到相同的物理内存中。**不同的进程可以使用各自的虚拟地址访问到这一片相同的物理内存。\n\n![image-20240130232827259](进程间的通信方式/image-20240130232827259.png)\n\n* 优点\n  * 解决了消息队列中不适合大的数据的通信\n  * 不同进程之间无需进行频繁的用户态和内核态的转换，因为进程都是在自己的用户地址空间中来进行操作\n\n* 缺点\n\n  * 对共享内存的读写问题\n\n    因为共享内存存储的信息一旦发生改变对于不同的进程都是可见的，所以会涉及到读写一致性的问题\n\n  * 共享内存也变为了临界资源，存在进程进程之间的竞争\n\n    需要保护机制，使得共享资源在任意时刻只能被一个进程访问。\n\n### 信号量\n\n> 信号量可以提供对临界资源的保护\n\n信号量是一个整型的计数器，可以用于实现进程间的互斥以及同步，不是用于缓存进程间通信的数据。\n\n信号量的大小表示为资源的数量，对信号量的操作方式有两种原子操作\n\n* 一个是 **P 操作**，这个操作会把信号量减去 1，相减后如果信号量 < 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 >= 0，则表明还有资源可使用，进程可正常继续执行。\n* 一个是 **V 操作**，这个操作会把信号量加上 1，相加后如果信号量 <= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 > 0，则表明当前没有阻塞中的进程；\n\n通过PV操作可以控制进程对资源的互斥访问以及控制进程的同步顺序，**涉及到操作系统的知识**\n\n### 信号\n\n> 在进程工作异常情况下，需要通过信号来通知进程\n\n信号是进程间通信机制中的唯一的异步通信方式，因为可以在任何时候发送信号到某一进程，一旦有信号产生，用户就可以进行对信号处理。\n\n* 信号的处理方式\n  * 执行默认操作： 例如linux中的SIGTERM 信号，就是终止进程的意思\n  * 捕捉信号：可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数\n  * 忽略信号：当不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。\n\n* `SIGKILL` 和 `SEGSTOP`无法被捕捉和忽略。\n\n### Socket\n\nSocket通信实现的是在不同主机之间的通信，分为两种常见的通信方式，一个是基于 TCP 协议的通信方式，一个是基于 UDP 协议的通信方式\n\n> 基于 TCP 协议的通信方式需要客户和服务器之间建立TCP连接，进行三次握手。\n\n![image-20240130234627976](进程间的通信方式/image-20240130234627976.png)\n\n- 服务端和客户端初始化 `socket`，得到文件描述符；\n- 服务端调用 `bind`，将绑定在 IP 地址和端口;\n- 服务端调用 `listen`，进行监听；\n- 服务端调用 `accept`，等待客户端连接；\n- 客户端调用 `connect`，向服务器端的地址和端口发起连接请求；\n- 服务端 `accept` 返回用于传输的 `socket` 的文件描述符；\n- 客户端调用 `write` 写入数据；服务端调用 `read` 读取数据；\n- 客户端断开连接时，会调用 `close`，那么服务端 `read` 读取数据的时候，就会读取到了 `EOF`，待处理完数据后，服务端调用 `close`，表示连接关闭。\n\n这里需要注意的是，服务端调用 `accept` 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。\n\n所以，监听的 socket 和真正用来传送数据的 socket，是「**两个**」 socket，一个叫作**监听 socket**，一个叫作**已完成连接 socket**。\n\n成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。\n\n> 基于UDP的Socket通信\n\n![image-20240130234754230](进程间的通信方式/image-20240130234754230.png)\n\nUDP 是没有连接的，所以不需要三次握手，也就不需要像 TCP 调用 listen 和 connect，但是 UDP 的交互仍然需要 IP 地址和端口号，因此也需要 bind。\n\n对于 UDP 来说，不需要要维护连接，那么也就没有所谓的发送方和接收方，甚至都不存在客户端和服务端的概念，只要有一个 socket 多台机器就可以任意通信，因此每一个 UDP 的 socket 都需要 bind。\n\n另外，每次通信时，调用 sendto 和 recvfrom，都要传入目标主机的 IP 地址和端口。\n","slug":"进程间的通信方式","published":1,"updated":"2024-02-09T05:04:50.531Z","comments":1,"layout":"post","photos":[],"_id":"clseauyn50008ngdfclvi4s5d","content":"<h2 id=\"进程间的通信方式\"><a href=\"#进程间的通信方式\" class=\"headerlink\" title=\"进程间的通信方式\"></a>进程间的通信方式</h2><p>每个进程的用户地址空间是独立的，一般情况之下，不同的进程是<strong>无法</strong>通过进程间各自的地址空间来进行互相访问，但是不同的进程所拥有的内核空间是共享的，因此如果不同进程之间需要进行通信必须要通过内核。</p>\n<h3 id=\"管道通信\"><a href=\"#管道通信\" class=\"headerlink\" title=\"管道通信\"></a>管道通信</h3><p>管道通信分为匿名管道和命名管道，通过名字可以区分，匿名管道是无法获取和控制的管道，命名管道是通过用户可以自己建立的管道。</p>\n<p>管道智能进行半双工的通信，即数据传输是单向的，如果想要实现互相通信，就需要创建两个管道。</p>\n<h4 id=\"匿名管道\"><a href=\"#匿名管道\" class=\"headerlink\" title=\"匿名管道\"></a>匿名管道</h4><ul>\n<li>在linux中的<code>|</code>竖线就是一个管道，将管道符前的操作的输出作为管道符后的操作的输入</li>\n</ul>\n<p>一个匿名管道的创建会使用到下面的系统调用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">pipe</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> fd[<span class=\"hljs-number\">2</span>])</span></span>;<br></code></pre></td></tr></table></figure>\n<p>表示创建了一个匿名管道并返回了两个文件描述符，一个是管道读取端的描述符<code>fd[0]</code>，另一个是管道写入端的描述符<code>fd[1]</code>，<strong>匿名管道是特殊的文件，只存在于内存当中，不存在于文件系统中</strong></p>\n<p>管道实际上就是内核中的一串缓存，进程通过文件描述符来对这一串缓存进行读写操作</p>\n<img src=\"/2024/01/30/index/image-20240130223824673.png\" class=\"\" title=\"image-20240130223824673\">\n<p><strong>如果说需要实现多个进程之间的通信</strong>，可以使用<code>fork</code>操作来创建子进程，创建子进程时，子进程会同时复制父进程的文件描述符，两个进程便可以通过各自的文件描述符来进行跨进程之间的通信。</p>\n<img src=\"/2024/01/30/index/image-20240130224638178.png\" class=\"\" title=\"image-20240130224638178\">\n<p>通过对文件描述符的开放和关闭，可以控制父进程和子进程之间的读写操作。</p>\n<ul>\n<li>如：父进程关闭读取的 fd[0]，只保留写入的 fd[1]；子进程关闭写入的 fd[1]，只保留读取的 fd[0]；</li>\n<li>便可以实现从父进程向子进程的数据写入</li>\n</ul>\n<p>实现多个进程之间匿名管道的通信另一种方式就是fork两个子进程，关闭父进程的文件描述符，开启子进程的<code>fd</code>，实现子进程之间的通信。</p>\n<p>可以看出来，匿名管道的通信范围仅限于父子关系的进程。因为管道没有实体，没有管道文件，只能通过复制父进程的fd来使用文件描述符。</p>\n<h4 id=\"命名管道\"><a href=\"#命名管道\" class=\"headerlink\" title=\"命名管道\"></a>命名管道</h4><ul>\n<li>在linux中可以通过<code>mkfifo</code>命令来创建并指定管道名字</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mkfifo</span> myPipe<br></code></pre></td></tr></table></figure>\n<p>因为命名管道，提前创建了一个类型为管道的设备文件，在进程中只要使用到这个设备，便可以互相通信。</p>\n<p><strong>管道的通信方式，效率较低，不适合进程间的频繁交换数据</strong></p>\n<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><blockquote>\n<p>在管道通信的缺点下，消息队列可以解决进程间频繁交换数据的问题。</p>\n</blockquote>\n<p>消息队列是保护在内核中的消息列表，如果进程之间需要进行通信，只需要将消息放在对应的消息队列中便可以正常返回，无需阻塞等待，等到另一个进程需要的时候去消息队列中去读取便可以。</p>\n<p>如果消息队列没有释放或者没有关闭操作系统，消息队列会一直存在，而匿名管道则是随着进程的生命周期的结束而销毁。</p>\n<ul>\n<li><p>优点</p>\n<ul>\n<li><p>解决频繁交换数据的问题</p>\n<p>两个进程之间就像发邮件一样可以你来我往进行沟通</p>\n</li>\n<li><p>进程发送消息后无需阻塞等待消息的接收</p>\n</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li><p>不适合比较大的数据传输</p>\n<p>消息队列中的消息体是由结构化的数据结构来组织的，有最大长度的限制。</p>\n</li>\n<li><p>消息队列的通信过程中，存在用户态与内核态之间的数据拷贝开销</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h3><p>共享内存用到的是现代操作系统中的内存管理的<strong>虚拟内存技术</strong>，每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。</p>\n<p><strong>共享内存的机制：拿出一块虚拟地址空间，映射到相同的物理内存中。</strong>不同的进程可以使用各自的虚拟地址访问到这一片相同的物理内存。</p>\n<img src=\"/2024/01/30/index/image-20240130232827259.png\" class=\"\" title=\"image-20240130232827259\">\n<ul>\n<li><p>优点</p>\n<ul>\n<li>解决了消息队列中不适合大的数据的通信</li>\n<li>不同进程之间无需进行频繁的用户态和内核态的转换，因为进程都是在自己的用户地址空间中来进行操作</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li><p>对共享内存的读写问题</p>\n<p>因为共享内存存储的信息一旦发生改变对于不同的进程都是可见的，所以会涉及到读写一致性的问题</p>\n</li>\n<li><p>共享内存也变为了临界资源，存在进程进程之间的竞争</p>\n<p>需要保护机制，使得共享资源在任意时刻只能被一个进程访问。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h3><blockquote>\n<p>信号量可以提供对临界资源的保护</p>\n</blockquote>\n<p>信号量是一个整型的计数器，可以用于实现进程间的互斥以及同步，不是用于缓存进程间通信的数据。</p>\n<p>信号量的大小表示为资源的数量，对信号量的操作方式有两种原子操作</p>\n<ul>\n<li>一个是 <strong>P 操作</strong>，这个操作会把信号量减去 1，相减后如果信号量 &lt; 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 &gt;= 0，则表明还有资源可使用，进程可正常继续执行。</li>\n<li>一个是 <strong>V 操作</strong>，这个操作会把信号量加上 1，相加后如果信号量 &lt;= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 &gt; 0，则表明当前没有阻塞中的进程；</li>\n</ul>\n<p>通过PV操作可以控制进程对资源的互斥访问以及控制进程的同步顺序，<strong>涉及到操作系统的知识</strong></p>\n<h3 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h3><blockquote>\n<p>在进程工作异常情况下，需要通过信号来通知进程</p>\n</blockquote>\n<p>信号是进程间通信机制中的唯一的异步通信方式，因为可以在任何时候发送信号到某一进程，一旦有信号产生，用户就可以进行对信号处理。</p>\n<ul>\n<li><p>信号的处理方式</p>\n<ul>\n<li>执行默认操作： 例如linux中的SIGTERM 信号，就是终止进程的意思</li>\n<li>捕捉信号：可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数</li>\n<li>忽略信号：当不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。</li>\n</ul>\n</li>\n<li><p><code>SIGKILL</code> 和 <code>SEGSTOP</code>无法被捕捉和忽略。</p>\n</li>\n</ul>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3><p>Socket通信实现的是在不同主机之间的通信，分为两种常见的通信方式，一个是基于 TCP 协议的通信方式，一个是基于 UDP 协议的通信方式</p>\n<blockquote>\n<p>基于 TCP 协议的通信方式需要客户和服务器之间建立TCP连接，进行三次握手。</p>\n</blockquote>\n<img src=\"/2024/01/30/index/image-20240130234627976.png\" class=\"\" title=\"image-20240130234627976\">\n<ul>\n<li>服务端和客户端初始化 <code>socket</code>，得到文件描述符；</li>\n<li>服务端调用 <code>bind</code>，将绑定在 IP 地址和端口;</li>\n<li>服务端调用 <code>listen</code>，进行监听；</li>\n<li>服务端调用 <code>accept</code>，等待客户端连接；</li>\n<li>客户端调用 <code>connect</code>，向服务器端的地址和端口发起连接请求；</li>\n<li>服务端 <code>accept</code> 返回用于传输的 <code>socket</code> 的文件描述符；</li>\n<li>客户端调用 <code>write</code> 写入数据；服务端调用 <code>read</code> 读取数据；</li>\n<li>客户端断开连接时，会调用 <code>close</code>，那么服务端 <code>read</code> 读取数据的时候，就会读取到了 <code>EOF</code>，待处理完数据后，服务端调用 <code>close</code>，表示连接关闭。</li>\n</ul>\n<p>这里需要注意的是，服务端调用 <code>accept</code> 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。</p>\n<p>所以，监听的 socket 和真正用来传送数据的 socket，是「<strong>两个</strong>」 socket，一个叫作<strong>监听 socket</strong>，一个叫作<strong>已完成连接 socket</strong>。</p>\n<p>成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。</p>\n<blockquote>\n<p>基于UDP的Socket通信</p>\n</blockquote>\n<img src=\"/2024/01/30/index/image-20240130234754230.png\" class=\"\" title=\"image-20240130234754230\">\n<p>UDP 是没有连接的，所以不需要三次握手，也就不需要像 TCP 调用 listen 和 connect，但是 UDP 的交互仍然需要 IP 地址和端口号，因此也需要 bind。</p>\n<p>对于 UDP 来说，不需要要维护连接，那么也就没有所谓的发送方和接收方，甚至都不存在客户端和服务端的概念，只要有一个 socket 多台机器就可以任意通信，因此每一个 UDP 的 socket 都需要 bind。</p>\n<p>另外，每次通信时，调用 sendto 和 recvfrom，都要传入目标主机的 IP 地址和端口。</p>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"进程间的通信方式\"><a href=\"#进程间的通信方式\" class=\"headerlink\" title=\"进程间的通信方式\"></a>进程间的通信方式</h2><p>每个进程的用户地址空间是独立的，一般情况之下，不同的进程是<strong>无法</strong>通过进程间各自的地址空间来进行互相访问，但是不同的进程所拥有的内核空间是共享的，因此如果不同进程之间需要进行通信必须要通过内核。</p>\n<h3 id=\"管道通信\"><a href=\"#管道通信\" class=\"headerlink\" title=\"管道通信\"></a>管道通信</h3><p>管道通信分为匿名管道和命名管道，通过名字可以区分，匿名管道是无法获取和控制的管道，命名管道是通过用户可以自己建立的管道。</p>\n<p>管道智能进行半双工的通信，即数据传输是单向的，如果想要实现互相通信，就需要创建两个管道。</p>\n<h4 id=\"匿名管道\"><a href=\"#匿名管道\" class=\"headerlink\" title=\"匿名管道\"></a>匿名管道</h4><ul>\n<li>在linux中的<code>|</code>竖线就是一个管道，将管道符前的操作的输出作为管道符后的操作的输入</li>\n</ul>\n<p>一个匿名管道的创建会使用到下面的系统调用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">pipe</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> fd[<span class=\"hljs-number\">2</span>])</span></span>;<br></code></pre></td></tr></table></figure>\n<p>表示创建了一个匿名管道并返回了两个文件描述符，一个是管道读取端的描述符<code>fd[0]</code>，另一个是管道写入端的描述符<code>fd[1]</code>，<strong>匿名管道是特殊的文件，只存在于内存当中，不存在于文件系统中</strong></p>\n<p>管道实际上就是内核中的一串缓存，进程通过文件描述符来对这一串缓存进行读写操作</p>\n<img src=\"/2024/01/30/index/image-20240130223824673.png\" class=\"\" title=\"image-20240130223824673\">\n<p><strong>如果说需要实现多个进程之间的通信</strong>，可以使用<code>fork</code>操作来创建子进程，创建子进程时，子进程会同时复制父进程的文件描述符，两个进程便可以通过各自的文件描述符来进行跨进程之间的通信。</p>\n<img src=\"/2024/01/30/index/image-20240130224638178.png\" class=\"\" title=\"image-20240130224638178\">\n<p>通过对文件描述符的开放和关闭，可以控制父进程和子进程之间的读写操作。</p>\n<ul>\n<li>如：父进程关闭读取的 fd[0]，只保留写入的 fd[1]；子进程关闭写入的 fd[1]，只保留读取的 fd[0]；</li>\n<li>便可以实现从父进程向子进程的数据写入</li>\n</ul>\n<p>实现多个进程之间匿名管道的通信另一种方式就是fork两个子进程，关闭父进程的文件描述符，开启子进程的<code>fd</code>，实现子进程之间的通信。</p>\n<p>可以看出来，匿名管道的通信范围仅限于父子关系的进程。因为管道没有实体，没有管道文件，只能通过复制父进程的fd来使用文件描述符。</p>\n<h4 id=\"命名管道\"><a href=\"#命名管道\" class=\"headerlink\" title=\"命名管道\"></a>命名管道</h4><ul>\n<li>在linux中可以通过<code>mkfifo</code>命令来创建并指定管道名字</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mkfifo</span> myPipe<br></code></pre></td></tr></table></figure>\n<p>因为命名管道，提前创建了一个类型为管道的设备文件，在进程中只要使用到这个设备，便可以互相通信。</p>\n<p><strong>管道的通信方式，效率较低，不适合进程间的频繁交换数据</strong></p>\n<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><blockquote>\n<p>在管道通信的缺点下，消息队列可以解决进程间频繁交换数据的问题。</p>\n</blockquote>\n<p>消息队列是保护在内核中的消息列表，如果进程之间需要进行通信，只需要将消息放在对应的消息队列中便可以正常返回，无需阻塞等待，等到另一个进程需要的时候去消息队列中去读取便可以。</p>\n<p>如果消息队列没有释放或者没有关闭操作系统，消息队列会一直存在，而匿名管道则是随着进程的生命周期的结束而销毁。</p>\n<ul>\n<li><p>优点</p>\n<ul>\n<li><p>解决频繁交换数据的问题</p>\n<p>两个进程之间就像发邮件一样可以你来我往进行沟通</p>\n</li>\n<li><p>进程发送消息后无需阻塞等待消息的接收</p>\n</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li><p>不适合比较大的数据传输</p>\n<p>消息队列中的消息体是由结构化的数据结构来组织的，有最大长度的限制。</p>\n</li>\n<li><p>消息队列的通信过程中，存在用户态与内核态之间的数据拷贝开销</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h3><p>共享内存用到的是现代操作系统中的内存管理的<strong>虚拟内存技术</strong>，每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。</p>\n<p><strong>共享内存的机制：拿出一块虚拟地址空间，映射到相同的物理内存中。</strong>不同的进程可以使用各自的虚拟地址访问到这一片相同的物理内存。</p>\n<img src=\"/2024/01/30/index/image-20240130232827259.png\" class=\"\" title=\"image-20240130232827259\">\n<ul>\n<li><p>优点</p>\n<ul>\n<li>解决了消息队列中不适合大的数据的通信</li>\n<li>不同进程之间无需进行频繁的用户态和内核态的转换，因为进程都是在自己的用户地址空间中来进行操作</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li><p>对共享内存的读写问题</p>\n<p>因为共享内存存储的信息一旦发生改变对于不同的进程都是可见的，所以会涉及到读写一致性的问题</p>\n</li>\n<li><p>共享内存也变为了临界资源，存在进程进程之间的竞争</p>\n<p>需要保护机制，使得共享资源在任意时刻只能被一个进程访问。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h3><blockquote>\n<p>信号量可以提供对临界资源的保护</p>\n</blockquote>\n<p>信号量是一个整型的计数器，可以用于实现进程间的互斥以及同步，不是用于缓存进程间通信的数据。</p>\n<p>信号量的大小表示为资源的数量，对信号量的操作方式有两种原子操作</p>\n<ul>\n<li>一个是 <strong>P 操作</strong>，这个操作会把信号量减去 1，相减后如果信号量 &lt; 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 &gt;= 0，则表明还有资源可使用，进程可正常继续执行。</li>\n<li>一个是 <strong>V 操作</strong>，这个操作会把信号量加上 1，相加后如果信号量 &lt;= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 &gt; 0，则表明当前没有阻塞中的进程；</li>\n</ul>\n<p>通过PV操作可以控制进程对资源的互斥访问以及控制进程的同步顺序，<strong>涉及到操作系统的知识</strong></p>\n<h3 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h3><blockquote>\n<p>在进程工作异常情况下，需要通过信号来通知进程</p>\n</blockquote>\n<p>信号是进程间通信机制中的唯一的异步通信方式，因为可以在任何时候发送信号到某一进程，一旦有信号产生，用户就可以进行对信号处理。</p>\n<ul>\n<li><p>信号的处理方式</p>\n<ul>\n<li>执行默认操作： 例如linux中的SIGTERM 信号，就是终止进程的意思</li>\n<li>捕捉信号：可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数</li>\n<li>忽略信号：当不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。</li>\n</ul>\n</li>\n<li><p><code>SIGKILL</code> 和 <code>SEGSTOP</code>无法被捕捉和忽略。</p>\n</li>\n</ul>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3><p>Socket通信实现的是在不同主机之间的通信，分为两种常见的通信方式，一个是基于 TCP 协议的通信方式，一个是基于 UDP 协议的通信方式</p>\n<blockquote>\n<p>基于 TCP 协议的通信方式需要客户和服务器之间建立TCP连接，进行三次握手。</p>\n</blockquote>\n<img src=\"/2024/01/30/index/image-20240130234627976.png\" class=\"\" title=\"image-20240130234627976\">\n<ul>\n<li>服务端和客户端初始化 <code>socket</code>，得到文件描述符；</li>\n<li>服务端调用 <code>bind</code>，将绑定在 IP 地址和端口;</li>\n<li>服务端调用 <code>listen</code>，进行监听；</li>\n<li>服务端调用 <code>accept</code>，等待客户端连接；</li>\n<li>客户端调用 <code>connect</code>，向服务器端的地址和端口发起连接请求；</li>\n<li>服务端 <code>accept</code> 返回用于传输的 <code>socket</code> 的文件描述符；</li>\n<li>客户端调用 <code>write</code> 写入数据；服务端调用 <code>read</code> 读取数据；</li>\n<li>客户端断开连接时，会调用 <code>close</code>，那么服务端 <code>read</code> 读取数据的时候，就会读取到了 <code>EOF</code>，待处理完数据后，服务端调用 <code>close</code>，表示连接关闭。</li>\n</ul>\n<p>这里需要注意的是，服务端调用 <code>accept</code> 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。</p>\n<p>所以，监听的 socket 和真正用来传送数据的 socket，是「<strong>两个</strong>」 socket，一个叫作<strong>监听 socket</strong>，一个叫作<strong>已完成连接 socket</strong>。</p>\n<p>成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。</p>\n<blockquote>\n<p>基于UDP的Socket通信</p>\n</blockquote>\n<img src=\"/2024/01/30/index/image-20240130234754230.png\" class=\"\" title=\"image-20240130234754230\">\n<p>UDP 是没有连接的，所以不需要三次握手，也就不需要像 TCP 调用 listen 和 connect，但是 UDP 的交互仍然需要 IP 地址和端口号，因此也需要 bind。</p>\n<p>对于 UDP 来说，不需要要维护连接，那么也就没有所谓的发送方和接收方，甚至都不存在客户端和服务端的概念，只要有一个 socket 多台机器就可以任意通信，因此每一个 UDP 的 socket 都需要 bind。</p>\n<p>另外，每次通信时，调用 sendto 和 recvfrom，都要传入目标主机的 IP 地址和端口。</p>\n"}],"PostAsset":[{"_id":"source/_posts/git/image-20231204110955462.png","slug":"image-20231204110955462.png","post":"clseauyn40006ngdf7ymkh0h6","modified":0,"renderable":0},{"_id":"source/_posts/git/image-20231204111125551.png","slug":"image-20231204111125551.png","post":"clseauyn40006ngdf7ymkh0h6","modified":0,"renderable":0},{"_id":"source/_posts/git/image-20231204111350240.png","slug":"image-20231204111350240.png","post":"clseauyn40006ngdf7ymkh0h6","modified":0,"renderable":0},{"_id":"source/_posts/git/image-20231204112945547.png","slug":"image-20231204112945547.png","post":"clseauyn40006ngdf7ymkh0h6","modified":0,"renderable":0},{"_id":"source/_posts/git/image-20231204113100512.png","slug":"image-20231204113100512.png","post":"clseauyn40006ngdf7ymkh0h6","modified":0,"renderable":0},{"_id":"source/_posts/git/image-20231204113208566.png","slug":"image-20231204113208566.png","post":"clseauyn40006ngdf7ymkh0h6","modified":0,"renderable":0},{"_id":"source/_posts/git/image-20231204113304822.png","slug":"image-20231204113304822.png","post":"clseauyn40006ngdf7ymkh0h6","modified":0,"renderable":0},{"_id":"source/_posts/平方根倒数算法/WTF.png","slug":"WTF.png","post":"clseauyn50007ngdfftfc1axs","modified":0,"renderable":0},{"_id":"source/_posts/平方根倒数算法/运算过程.png","slug":"运算过程.png","post":"clseauyn50007ngdfftfc1axs","modified":0,"renderable":0},{"_id":"source/_posts/进程间的通信方式/image-20240130223824673.png","slug":"image-20240130223824673.png","post":"clseauyn50008ngdfclvi4s5d","modified":0,"renderable":0},{"_id":"source/_posts/进程间的通信方式/image-20240130223920751.png","slug":"image-20240130223920751.png","post":"clseauyn50008ngdfclvi4s5d","modified":0,"renderable":0},{"_id":"source/_posts/进程间的通信方式/image-20240130224638178.png","slug":"image-20240130224638178.png","post":"clseauyn50008ngdfclvi4s5d","modified":0,"renderable":0},{"_id":"source/_posts/进程间的通信方式/image-20240130232827259.png","slug":"image-20240130232827259.png","post":"clseauyn50008ngdfclvi4s5d","modified":0,"renderable":0},{"_id":"source/_posts/进程间的通信方式/image-20240130234556499.png","slug":"image-20240130234556499.png","post":"clseauyn50008ngdfclvi4s5d","modified":0,"renderable":0},{"_id":"source/_posts/进程间的通信方式/image-20240130234627976.png","slug":"image-20240130234627976.png","post":"clseauyn50008ngdfclvi4s5d","modified":0,"renderable":0},{"_id":"source/_posts/进程间的通信方式/image-20240130234754230.png","slug":"image-20240130234754230.png","post":"clseauyn50008ngdfclvi4s5d","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clseauyn00001ngdf5ollfa34","category_id":"clseauyn30004ngdf7f98fq7c","_id":"clseauyn7000cngdffn0u5kst"},{"post_id":"clseauyn20003ngdf0p6qbhk5","category_id":"clseauyn60009ngdf0on69k78","_id":"clseauyn8000gngdfdt5i7n86"},{"post_id":"clseauyn40006ngdf7ymkh0h6","category_id":"clseauyn60009ngdf0on69k78","_id":"clseauyn8000kngdfh819e3y2"},{"post_id":"clseauyn50007ngdfftfc1axs","category_id":"clseauyn60009ngdf0on69k78","_id":"clseauyn8000ongdffe6z2cc6"},{"post_id":"clseauyn50008ngdfclvi4s5d","category_id":"clseauyn60009ngdf0on69k78","_id":"clseauyn9000qngdf1by39t3o"}],"PostTag":[{"post_id":"clseauyn00001ngdf5ollfa34","tag_id":"clseauyn40005ngdf6y5vcv9e","_id":"clseauyn6000bngdf986d94wz"},{"post_id":"clseauyn20003ngdf0p6qbhk5","tag_id":"clseauyn6000angdf1iea0hud","_id":"clseauyn8000ingdfcz986eec"},{"post_id":"clseauyn20003ngdf0p6qbhk5","tag_id":"clseauyn7000engdfgkbsa0q2","_id":"clseauyn8000lngdfh4v08tzp"},{"post_id":"clseauyn40006ngdf7ymkh0h6","tag_id":"clseauyn8000hngdf7th72hsn","_id":"clseauyn8000nngdfcoh6hj1z"},{"post_id":"clseauyn50007ngdfftfc1axs","tag_id":"clseauyn8000mngdfbi1egm72","_id":"clseauyn9000sngdfc6qh95ty"},{"post_id":"clseauyn50007ngdfftfc1axs","tag_id":"clseauyn9000pngdf3x8v3i0g","_id":"clseauyn9000tngdf49sa3eik"},{"post_id":"clseauyn50008ngdfclvi4s5d","tag_id":"clseauyn9000rngdfa1hq1ydt","_id":"clseauyn9000vngdfg9e61vge"},{"post_id":"clseauyn50008ngdfclvi4s5d","tag_id":"clseauyn9000ungdfceef79ia","_id":"clseauyn9000wngdf07zo79my"}],"Tag":[{"name":"go语言 并发","_id":"clseauyn40005ngdf6y5vcv9e"},{"name":"C++","_id":"clseauyn6000angdf1iea0hud"},{"name":"zlib","_id":"clseauyn7000engdfgkbsa0q2"},{"name":"git","_id":"clseauyn8000hngdf7th72hsn"},{"name":"数学","_id":"clseauyn8000mngdfbi1egm72"},{"name":"算法","_id":"clseauyn9000pngdf3x8v3i0g"},{"name":"操作系统","_id":"clseauyn9000rngdfa1hq1ydt"},{"name":"进程通信","_id":"clseauyn9000ungdfceef79ia"}]}}